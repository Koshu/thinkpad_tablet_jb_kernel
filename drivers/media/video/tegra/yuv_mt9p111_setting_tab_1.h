/*
 * Copyright (c) 2008 NVIDIA Corporation.  All rights reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software and related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA Corporation is strictly prohibited.
 */

#ifndef YUV5_SENSOR_TAB_H
#define YUV5_SENSOR_TAB_H
#if defined(__cplusplus)
extern "C"
{
#endif

// flash control by the sensor strobe pin
#define YUV_SENSOR_STROBE (0)

struct sensor_reg {
	u8  op;
	u16 addr;
	u16 val;
};

struct sensor_info {
	int mode;
	int focus_mode;
	int flash_mode;
	int otpm_mode;
	int module_source;  // Compal Indigo-Carl 2011.08.12
	int af_lowlight;
	u16 af_lowlight_val;
	u8  capture_frame_rate;
	u16 sharpness;
#ifdef CONFIG_VIDEO_LTC3216
	int torch_off_timer_counter;
	struct timer_list torch_off_timer;
	struct work_struct work;
#endif // CONFIG_VIDEO_LTC3216
	struct i2c_client *i2c_client;
	struct yuv5_sensor_platform_data *pdata;
};

static struct sensor_info *info;

static struct sensor_reg default_A_patch_ram_table[] = {
//APGA patch RAM LSC, Zone 0, A-light, start address is 0x1580 (5504)
/* Compal Carl 2011.06.21 tune setting for A ++ */
{WRITE_REG_DATA16, 0x098A, 0x1580},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x7BCF},
{WRITE_REG_DATA16, 0x0992, 0x2DEC},
{WRITE_REG_DATA16, 0x0994, 0x42B1},
{WRITE_REG_DATA16, 0x0996, 0x4DEC},
{WRITE_REG_DATA16, 0x0998, 0xB7F1},
{WRITE_REG_DATA16, 0x099A, 0x7F6F},
{WRITE_REG_DATA16, 0x099C, 0xE40E},
{WRITE_REG_DATA16, 0x099E, 0x6211},

{WRITE_REG_DATA16, 0x098A, 0x1590},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x5C2F},
{WRITE_REG_DATA16, 0x0992, 0xF251},
{WRITE_REG_DATA16, 0x0994, 0x0090},
{WRITE_REG_DATA16, 0x0996, 0x8B2A},
{WRITE_REG_DATA16, 0x0998, 0x47CF},
{WRITE_REG_DATA16, 0x099A, 0xBC8D},
{WRITE_REG_DATA16, 0x099C, 0x9F0F},
{WRITE_REG_DATA16, 0x099E, 0x0110},

{WRITE_REG_DATA16, 0x098A, 0x15A0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xCF8E},
{WRITE_REG_DATA16, 0x0992, 0x6551},
{WRITE_REG_DATA16, 0x0994, 0x762E},
{WRITE_REG_DATA16, 0x0996, 0xDA71},
{WRITE_REG_DATA16, 0x0998, 0xDD6A},
{WRITE_REG_DATA16, 0x099A, 0xE78C},
{WRITE_REG_DATA16, 0x099C, 0xD7EF},
{WRITE_REG_DATA16, 0x099E, 0x744E},

{WRITE_REG_DATA16, 0x098A, 0x15B0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x7770},
{WRITE_REG_DATA16, 0x0992, 0x230C},
{WRITE_REG_DATA16, 0x0994, 0x336E},
{WRITE_REG_DATA16, 0x0996, 0x232D},
{WRITE_REG_DATA16, 0x0998, 0xB50F},
{WRITE_REG_DATA16, 0x099A, 0x604B},
{WRITE_REG_DATA16, 0x099C, 0xED8D},
{WRITE_REG_DATA16, 0x099E, 0xF2EC},

{WRITE_REG_DATA16, 0x098A, 0x15C0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x2F2F},
{WRITE_REG_DATA16, 0x0992, 0x0EEC},
{WRITE_REG_DATA16, 0x0994, 0xA450},
{WRITE_REG_DATA16, 0x0996, 0x668B},
{WRITE_REG_DATA16, 0x0998, 0xAF6D},
{WRITE_REG_DATA16, 0x099A, 0xBBCE},
{WRITE_REG_DATA16, 0x099C, 0x3ECF},
{WRITE_REG_DATA16, 0x099E, 0x0ACF},

{WRITE_REG_DATA16, 0x098A, 0x15D0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x0A32},
{WRITE_REG_DATA16, 0x0992, 0x1B6F},
{WRITE_REG_DATA16, 0x0994, 0xF5D2},
{WRITE_REG_DATA16, 0x0996, 0x888E},
{WRITE_REG_DATA16, 0x0998, 0x7931},
{WRITE_REG_DATA16, 0x099A, 0x10B2},
{WRITE_REG_DATA16, 0x099C, 0xB9EE},
{WRITE_REG_DATA16, 0x099E, 0xBED2},

{WRITE_REG_DATA16, 0x098A, 0x15E0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x1730},
{WRITE_REG_DATA16, 0x0992, 0x8CF1},
{WRITE_REG_DATA16, 0x0994, 0x1991},
{WRITE_REG_DATA16, 0x0996, 0x7DAF},
{WRITE_REG_DATA16, 0x0998, 0xA072},
{WRITE_REG_DATA16, 0x099A, 0xA711},
{WRITE_REG_DATA16, 0x099C, 0x2C73},
{WRITE_REG_DATA16, 0x099E, 0x11D2},

{WRITE_REG_DATA16, 0x098A, 0x15F0},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xF0CF},
{WRITE_REG_DATA16, 0x0992, 0x8F73},
{WRITE_REG_DATA16, 0x0994, 0x04D1},
{WRITE_REG_DATA16, 0x0996, 0x22D2},
{WRITE_REG_DATA16, 0x0998, 0xB1CF},
{WRITE_REG_DATA16, 0x099A, 0xECCC},
{WRITE_REG_DATA16, 0x099C, 0x42F2},
{WRITE_REG_DATA16, 0x099E, 0xC6AF},

{WRITE_REG_DATA16, 0x098A, 0x1600},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xC673},
{WRITE_REG_DATA16, 0x0992, 0x508D},
{WRITE_REG_DATA16, 0x0994, 0x06C9},
{WRITE_REG_DATA16, 0x0996, 0xF1CF},
{WRITE_REG_DATA16, 0x0998, 0x1CEE},
{WRITE_REG_DATA16, 0x099A, 0x8CCF},
{WRITE_REG_DATA16, 0x099C, 0xE02F},
{WRITE_REG_DATA16, 0x099E, 0x760F},

{WRITE_REG_DATA16, 0x098A, 0x1610},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x6610},
{WRITE_REG_DATA16, 0x0992, 0xB3F0},
{WRITE_REG_DATA16, 0x0994, 0xD7EE},
{WRITE_REG_DATA16, 0x0996, 0xA9B0},
{WRITE_REG_DATA16, 0x0998, 0x682B},
{WRITE_REG_DATA16, 0x099A, 0x1DF2},
{WRITE_REG_DATA16, 0x099C, 0xA491},
{WRITE_REG_DATA16, 0x099E, 0xB5F1},

{WRITE_REG_DATA16, 0x098A, 0x1620},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xEC10},
{WRITE_REG_DATA16, 0x0992, 0x2B31},
{WRITE_REG_DATA16, 0x0994, 0x8A75},
{WRITE_REG_DATA16, 0x0996, 0xACD4},
{WRITE_REG_DATA16, 0x0998, 0x21F7},
{WRITE_REG_DATA16, 0x099A, 0x9F91},
{WRITE_REG_DATA16, 0x099C, 0x3212},
{WRITE_REG_DATA16, 0x099E, 0xA615},

{WRITE_REG_DATA16, 0x098A, 0x1630},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x87D5},
{WRITE_REG_DATA16, 0x0992, 0x3797},
{WRITE_REG_DATA16, 0x0994, 0xCB30},
{WRITE_REG_DATA16, 0x0996, 0xCBF0},
{WRITE_REG_DATA16, 0x0998, 0xC352},
{WRITE_REG_DATA16, 0x099A, 0xD771},
{WRITE_REG_DATA16, 0x099C, 0x6F95},
{WRITE_REG_DATA16, 0x099E, 0x84F1},

{WRITE_REG_DATA16, 0x098A, 0x1640},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x6352},
{WRITE_REG_DATA16, 0x0992, 0x8115},
{WRITE_REG_DATA16, 0x0994, 0x8BF5},
{WRITE_REG_DATA16, 0x0996, 0x2237},
{WRITE_REG_DATA16, 0x0998, 0x03C8},
{WRITE_REG_DATA16, 0x099A, 0x04F4},
{WRITE_REG_DATA16, 0x099C, 0x0000},
{WRITE_REG_DATA16, 0x099E, 0x0000},
/* Compal Carl 2011.06.21 tune setting for A -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg default_CWF_patch_ram_table[] = {
//APGA patch RAM LSC, Zone 1, CWF or TL84, start address is 0x164C (5708)
/* Compal Carl 2011.06.21 tune setting for CWF ++ */
{WRITE_REG_DATA16, 0x098A, 0x164C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x7D4F},
{WRITE_REG_DATA16, 0x0992, 0x6D0D},
{WRITE_REG_DATA16, 0x0994, 0x4571},
{WRITE_REG_DATA16, 0x0996, 0xD50C},
{WRITE_REG_DATA16, 0x0998, 0xC151},
{WRITE_REG_DATA16, 0x099A, 0x0110},
{WRITE_REG_DATA16, 0x099C, 0x848E},
{WRITE_REG_DATA16, 0x099E, 0x7FD0},

{WRITE_REG_DATA16, 0x098A, 0x165C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x05EF},
{WRITE_REG_DATA16, 0x0992, 0x8B71},
{WRITE_REG_DATA16, 0x0994, 0x7FCF},
{WRITE_REG_DATA16, 0x0996, 0x086C},
{WRITE_REG_DATA16, 0x0998, 0x1950},
{WRITE_REG_DATA16, 0x099A, 0xE24D},
{WRITE_REG_DATA16, 0x099C, 0x9B90},
{WRITE_REG_DATA16, 0x099E, 0x7FAF},

{WRITE_REG_DATA16, 0x098A, 0x166C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x868E},
{WRITE_REG_DATA16, 0x0992, 0x5671},
{WRITE_REG_DATA16, 0x0994, 0x19AE},
{WRITE_REG_DATA16, 0x0996, 0xD271},
{WRITE_REG_DATA16, 0x0998, 0xD64B},
{WRITE_REG_DATA16, 0x099A, 0xA30D},
{WRITE_REG_DATA16, 0x099C, 0xEC0F},
{WRITE_REG_DATA16, 0x099E, 0x2EEF},

{WRITE_REG_DATA16, 0x098A, 0x167C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x1671},
{WRITE_REG_DATA16, 0x0992, 0x0E0D},
{WRITE_REG_DATA16, 0x0994, 0x532D},
{WRITE_REG_DATA16, 0x0996, 0x8AEC},
{WRITE_REG_DATA16, 0x0998, 0x89EF},
{WRITE_REG_DATA16, 0x099A, 0x244E},
{WRITE_REG_DATA16, 0x099C, 0xC74D},
{WRITE_REG_DATA16, 0x099E, 0x484C},

{WRITE_REG_DATA16, 0x098A, 0x168C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x162F},
{WRITE_REG_DATA16, 0x0992, 0xBB0E},
{WRITE_REG_DATA16, 0x0994, 0xDF4F},
{WRITE_REG_DATA16, 0x0996, 0x286C},
{WRITE_REG_DATA16, 0x0998, 0xBFCD},
{WRITE_REG_DATA16, 0x099A, 0xD04E},
{WRITE_REG_DATA16, 0x099C, 0x446F},
{WRITE_REG_DATA16, 0x099E, 0x538F},

{WRITE_REG_DATA16, 0x098A, 0x169C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x0472},
{WRITE_REG_DATA16, 0x0992, 0x4DED},
{WRITE_REG_DATA16, 0x0994, 0xFA12},
{WRITE_REG_DATA16, 0x0996, 0x0C8E},
{WRITE_REG_DATA16, 0x0998, 0x0532},
{WRITE_REG_DATA16, 0x099A, 0x3F91},
{WRITE_REG_DATA16, 0x099C, 0xAD2B},
{WRITE_REG_DATA16, 0x099E, 0xDA12},

{WRITE_REG_DATA16, 0x098A, 0x16AC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x9EF0},
{WRITE_REG_DATA16, 0x0992, 0x3DD3},
{WRITE_REG_DATA16, 0x0994, 0x3891},
{WRITE_REG_DATA16, 0x0996, 0x3FCF},
{WRITE_REG_DATA16, 0x0998, 0xAFD2},
{WRITE_REG_DATA16, 0x099A, 0xC7B0},
{WRITE_REG_DATA16, 0x099C, 0x5672},
{WRITE_REG_DATA16, 0x099E, 0x0F72},

{WRITE_REG_DATA16, 0x098A, 0x16BC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xAA90},
{WRITE_REG_DATA16, 0x0992, 0x9373},
{WRITE_REG_DATA16, 0x0994, 0x38B1},
{WRITE_REG_DATA16, 0x0996, 0x3FB2},
{WRITE_REG_DATA16, 0x0998, 0xA4AF},
{WRITE_REG_DATA16, 0x099A, 0x3A4B},
{WRITE_REG_DATA16, 0x099C, 0x6392},
{WRITE_REG_DATA16, 0x099E, 0xC070},

{WRITE_REG_DATA16, 0x098A, 0x16CC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x8DB4},
{WRITE_REG_DATA16, 0x0992, 0x352D},
{WRITE_REG_DATA16, 0x0994, 0x1C4D},
{WRITE_REG_DATA16, 0x0996, 0xB06F},
{WRITE_REG_DATA16, 0x0998, 0x0730},
{WRITE_REG_DATA16, 0x099A, 0x88D1},
{WRITE_REG_DATA16, 0x099C, 0xDCCF},
{WRITE_REG_DATA16, 0x099E, 0x444D},

{WRITE_REG_DATA16, 0x098A, 0x16DC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x5D11},
{WRITE_REG_DATA16, 0x0992, 0x31EF},
{WRITE_REG_DATA16, 0x0994, 0xC472},
{WRITE_REG_DATA16, 0x0996, 0xAA10},
{WRITE_REG_DATA16, 0x0998, 0x68AC},
{WRITE_REG_DATA16, 0x099A, 0x3B12},
{WRITE_REG_DATA16, 0x099C, 0xF3D0},
{WRITE_REG_DATA16, 0x099E, 0xF732},

{WRITE_REG_DATA16, 0x098A, 0x16EC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x8851},
{WRITE_REG_DATA16, 0x0992, 0x3DD0},
{WRITE_REG_DATA16, 0x0994, 0x8DF5},
{WRITE_REG_DATA16, 0x0996, 0x8933},
{WRITE_REG_DATA16, 0x0998, 0x22F7},
{WRITE_REG_DATA16, 0x099A, 0xB691},
{WRITE_REG_DATA16, 0x099C, 0x1E8F},
{WRITE_REG_DATA16, 0x099E, 0x8113},

{WRITE_REG_DATA16, 0x098A, 0x16FC},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x94D2},
{WRITE_REG_DATA16, 0x0992, 0x1576},
{WRITE_REG_DATA16, 0x0994, 0xA411},
{WRITE_REG_DATA16, 0x0996, 0x8AB0},
{WRITE_REG_DATA16, 0x0998, 0xE053},
{WRITE_REG_DATA16, 0x099A, 0x9A4E},
{WRITE_REG_DATA16, 0x099C, 0x32F6},
{WRITE_REG_DATA16, 0x099E, 0x9CD1},

{WRITE_REG_DATA16, 0x098A, 0x170C},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x55D2},
{WRITE_REG_DATA16, 0x0992, 0x83F5},
{WRITE_REG_DATA16, 0x0994, 0xD334},
{WRITE_REG_DATA16, 0x0996, 0x20F7},
{WRITE_REG_DATA16, 0x0998, 0x03C8},
{WRITE_REG_DATA16, 0x099A, 0x051C},
{WRITE_REG_DATA16, 0x099C, 0x0000},
{WRITE_REG_DATA16, 0x099E, 0x0000},
/* Compal Carl 2011.06.21 tune setting for CWF -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg default_D65_patch_ram_table[] = {
//APGA patch RAM LSC, Zone 2, D65 or DNP, start address is 0x1718 (5912)
/* Compal Carl 2011.06.21 tune setting for D65 ++ */
{WRITE_REG_DATA16, 0x098A, 0x1718},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x7E8F},
{WRITE_REG_DATA16, 0x0992, 0x164E},
{WRITE_REG_DATA16, 0x0994, 0x4D71},
{WRITE_REG_DATA16, 0x0996, 0xCFCD},
{WRITE_REG_DATA16, 0x0998, 0xCDF1},
{WRITE_REG_DATA16, 0x099A, 0x0130},
{WRITE_REG_DATA16, 0x099C, 0x82AE},
{WRITE_REG_DATA16, 0x099E, 0x6870},

{WRITE_REG_DATA16, 0x098A, 0x1728},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x6E4E},
{WRITE_REG_DATA16, 0x0992, 0x81D1},
{WRITE_REG_DATA16, 0x0994, 0x7F4F},
{WRITE_REG_DATA16, 0x0996, 0x7CAC},
{WRITE_REG_DATA16, 0x0998, 0x6E50},
{WRITE_REG_DATA16, 0x099A, 0xE3AD},
{WRITE_REG_DATA16, 0x099C, 0x8391},
{WRITE_REG_DATA16, 0x099E, 0x7EEF},

{WRITE_REG_DATA16, 0x098A, 0x1738},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xD72D},
{WRITE_REG_DATA16, 0x0992, 0x4C91},
{WRITE_REG_DATA16, 0x0994, 0x0D2D},
{WRITE_REG_DATA16, 0x0996, 0xD0B1},
{WRITE_REG_DATA16, 0x0998, 0x806D},
{WRITE_REG_DATA16, 0x099A, 0xDE6D},
{WRITE_REG_DATA16, 0x099C, 0xB4CF},
{WRITE_REG_DATA16, 0x099E, 0x4B8F},

{WRITE_REG_DATA16, 0x098A, 0x1748},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x7B90},
{WRITE_REG_DATA16, 0x0992, 0x032D},
{WRITE_REG_DATA16, 0x0994, 0x042D},
{WRITE_REG_DATA16, 0x0996, 0x130D},
{WRITE_REG_DATA16, 0x0998, 0xDDCE},
{WRITE_REG_DATA16, 0x099A, 0x8D8E},
{WRITE_REG_DATA16, 0x099C, 0xCCEC},
{WRITE_REG_DATA16, 0x099E, 0x1B6E},

{WRITE_REG_DATA16, 0x098A, 0x1758},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x336E},
{WRITE_REG_DATA16, 0x0992, 0x9AEF},
{WRITE_REG_DATA16, 0x0994, 0xE22F},
{WRITE_REG_DATA16, 0x0996, 0x3129},
{WRITE_REG_DATA16, 0x0998, 0xC16D},
{WRITE_REG_DATA16, 0x099A, 0xA3EC},
{WRITE_REG_DATA16, 0x099C, 0x372F},
{WRITE_REG_DATA16, 0x099E, 0x3FCE},

{WRITE_REG_DATA16, 0x098A, 0x1768},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x0312},
{WRITE_REG_DATA16, 0x0992, 0x53AC},
{WRITE_REG_DATA16, 0x0994, 0x89F3},
{WRITE_REG_DATA16, 0x0996, 0x2B8E},
{WRITE_REG_DATA16, 0x0998, 0x61F2},
{WRITE_REG_DATA16, 0x099A, 0x35F1},
{WRITE_REG_DATA16, 0x099C, 0xC6E7},
{WRITE_REG_DATA16, 0x099E, 0xC4B2},

{WRITE_REG_DATA16, 0x098A, 0x1778},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xAA30},
{WRITE_REG_DATA16, 0x0992, 0x41B3},
{WRITE_REG_DATA16, 0x0994, 0x5231},
{WRITE_REG_DATA16, 0x0996, 0x202F},
{WRITE_REG_DATA16, 0x0998, 0xDD52},
{WRITE_REG_DATA16, 0x099A, 0xC40F},
{WRITE_REG_DATA16, 0x099C, 0x2D93},
{WRITE_REG_DATA16, 0x099E, 0x1292},

{WRITE_REG_DATA16, 0x098A, 0x1788},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xCB50},
{WRITE_REG_DATA16, 0x0992, 0x9B33},
{WRITE_REG_DATA16, 0x0994, 0x5331},
{WRITE_REG_DATA16, 0x0996, 0x09B3},
{WRITE_REG_DATA16, 0x0998, 0xCCCE},
{WRITE_REG_DATA16, 0x099A, 0x0DED},
{WRITE_REG_DATA16, 0x099C, 0x56F2},
{WRITE_REG_DATA16, 0x099E, 0xF6F0},

{WRITE_REG_DATA16, 0x098A, 0x1798},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x8CF4},
{WRITE_REG_DATA16, 0x0992, 0x48CE},
{WRITE_REG_DATA16, 0x0994, 0x3ACE},
{WRITE_REG_DATA16, 0x0996, 0xD8D0},
{WRITE_REG_DATA16, 0x0998, 0x30EE},
{WRITE_REG_DATA16, 0x099A, 0x9330},
{WRITE_REG_DATA16, 0x099C, 0xA9F0},
{WRITE_REG_DATA16, 0x099E, 0x902D},

{WRITE_REG_DATA16, 0x098A, 0x17A8},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x28F2},
{WRITE_REG_DATA16, 0x0992, 0x1770},
{WRITE_REG_DATA16, 0x0994, 0xC672},
{WRITE_REG_DATA16, 0x0996, 0x9950},
{WRITE_REG_DATA16, 0x0998, 0x406C},
{WRITE_REG_DATA16, 0x099A, 0x4D32},
{WRITE_REG_DATA16, 0x099C, 0xEAF0},
{WRITE_REG_DATA16, 0x099E, 0xABF3},

{WRITE_REG_DATA16, 0x098A, 0x17B8},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0xAA51},
{WRITE_REG_DATA16, 0x0992, 0x578F},
{WRITE_REG_DATA16, 0x0994, 0xF514},
{WRITE_REG_DATA16, 0x0996, 0xE551},
{WRITE_REG_DATA16, 0x0998, 0x1417},
{WRITE_REG_DATA16, 0x099A, 0xC451},
{WRITE_REG_DATA16, 0x099C, 0xA72E},
{WRITE_REG_DATA16, 0x099E, 0xD632},

{WRITE_REG_DATA16, 0x098A, 0x17C8},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x2810},
{WRITE_REG_DATA16, 0x0992, 0x7715},
{WRITE_REG_DATA16, 0x0994, 0xE4B0},
{WRITE_REG_DATA16, 0x0996, 0x30CD},
{WRITE_REG_DATA16, 0x0998, 0x8934},
{WRITE_REG_DATA16, 0x099A, 0x8B32},
{WRITE_REG_DATA16, 0x099C, 0x2DB6},
{WRITE_REG_DATA16, 0x099E, 0xAE51},

{WRITE_REG_DATA16, 0x098A, 0x17D8},	// Patch RAM Address
{WRITE_REG_DATA16, 0x0990, 0x3DF2},
{WRITE_REG_DATA16, 0x0992, 0xFD74},
{WRITE_REG_DATA16, 0x0994, 0xA1D4},
{WRITE_REG_DATA16, 0x0996, 0x16F7},
{WRITE_REG_DATA16, 0x0998, 0x03B4},
{WRITE_REG_DATA16, 0x099A, 0x0530},
{WRITE_REG_DATA16, 0x099C, 0x0000},
{WRITE_REG_DATA16, 0x099E, 0x0000},
/* Compal Carl 2011.06.21 tune setting for D65 -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg enable_PGA_patch_mem_table_start[] = {
{WRITE_REG_DATA16, 0x0982, 0x0000},	// ACCESS_CTL_STAT
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg enable_PGA_patch_mem_table_end[] = {
//[Load PGA settings from Patch RAM with APGA function enabled]
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [PGA_SOLUTION]
{WRITE_REG_DATA8,  0xD004, 0x02  },	// PGA_SOLUTION
{WRITE_REG_DATA16, 0xD006, 0x1580},	// PGA_ZONE_ADDR_0 -- this is the address of PGA Zone 0
{WRITE_REG_DATA16, 0xD008, 0x164C},	// PGA_ZONE_ADDR_1 -- this is the address of PGA Zone 1
{WRITE_REG_DATA16, 0xD00A, 0x1718},	// PGA_ZONE_ADDR_2 -- this is the address of PGA Zone 2
{WRITE_REG_DATA8,  0xD005, 0x00  },	// PGA_CURRENT_ZONE -- Specify PGA Zone to 0~2
{WRITE_REG_DATA16, 0xD002, 0x8007},	// PGA_ALGO

// set up APGA parameter according to the AWB result
{WRITE_REG_DATA8,  0xD00C, 0x03  },	// PGA_NO_OF_ZONES

// below settings is used for APGA and related to "AWB_CURRENT_CCM_POSITION"
// User may need to fine tune according to the AWB parameter settings
/* Compal Carl 2011.06.21 tune setting ++ */
{WRITE_REG_DATA8, 0xD00D, 0x00},	// PGA_ZONE_LOW_0 -- low limit for low CT condition, i.e. A-light
{WRITE_REG_DATA8, 0xD00E, 0x21},	// PGA_ZONE_LOW_1 -- low limit for middle CT condition, i.e. CWF or TL84
{WRITE_REG_DATA8, 0xD00F, 0x61},	// PGA_ZONE_LOW_2 -- low limit for higher CT condition, i.e. D65 or DNP
{WRITE_REG_DATA8, 0xD011, 0x20},	// PGA_ZONE_HIGH_0 -- high limit for low CT condition, i.e. A-light
{WRITE_REG_DATA8, 0xD012, 0x60},	// PGA_ZONE_HIGH_1 -- high limit for middle CT condition, i.e. CWF or TL84
{WRITE_REG_DATA8, 0xD013, 0x7F},	// PGA_ZONE_HIGH_2 -- high limit for higher CT condition, i.e. D65 or DNP
/* Compal Carl 2011.06.21 tune setting -- */
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg enable_PGA_OTPM_table[] = {
//Enable OTP
//[For 3 sets of OTPM LSC with APGA enable]
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [IO_NV_MEM_COMMAND]
{WRITE_REG_DATA16, 0xE02A, 0x0001},	// IO_NV_MEM_COMMAND
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay=100
{WRITE_REG_DATA8,  0xD00C, 0x03  },	// PGA_NO_OF_ZONES
{WRITE_REG_DATA16, 0xD006, 0x0000},	// PGA_ZONE_ADDR_0
{WRITE_REG_DATA16, 0xD008, 0x0100},	// PGA_ZONE_ADDR_1
{WRITE_REG_DATA16, 0xD00A, 0x0200},	// PGA_ZONE_ADDR_2
{WRITE_REG_DATA8,  0xD004, 0x04  },	// PGA_SOLUTION
{WRITE_REG_DATA8,  0xD005, 0x00  },	// PGA_CURRENT_ZONE
{WRITE_REG_DATA16, 0xD002, 0x8007},	// PGA_ALGO
{WRITE_REG_DATA8,  0xD00D, 0x00  },	// PGA_ZONE_LOW_0
{WRITE_REG_DATA8,  0xD00E, 0x1E  },	// PGA_ZONE_LOW_1
{WRITE_REG_DATA8,  0xD00F, 0x69  },	// PGA_ZONE_LOW_2
{WRITE_REG_DATA8,  0xD011, 0x1D  },	// PGA_ZONE_HIGH_0
{WRITE_REG_DATA8,  0xD012, 0x68  },	// PGA_ZONE_HIGH_1
{WRITE_REG_DATA8,  0xD013, 0x7F  },	// PGA_ZONE_HIGH_2
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

/* Compal Indigo-Carl 2011.05.31 begin */
/* second source OTP enable */
static struct sensor_reg enable_OTP_2_table[] = {
{WRITE_REG_DATA16, 0x381C, 0x0000},
{WRITE_REG_DATA16, 0xE02A, 0x0001},     // IO_NV_MEM_COMMAND
{SENSOR_5M_WAIT_MS, 0x0000, 200  },     // delay=200
{WRITE_REG_DATA16, 0x3812, 0x2124},
{SENSOR_5M_WAIT_MS, 0x0000, 100  },     // delay=100
{WRITE_REG_DATA8,  0xD004, 0x04  },     // PGA_SOLUTION
{WRITE_REG_DATA16, 0xD006, 0x0008},     // PGA_ZONE_ADDR_0
{WRITE_REG_DATA8,  0xD005, 0x00  },     // PGA_CURRENT_ZONE
{WRITE_REG_DATA16, 0xD002, 0x8002},     // PGA_ALGO
{WRITE_REG_DATA16, 0x3210, 0x49B8},	// COLOR_PIPELINE_CONTROL
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};
/* Compal Indigo-Carl 2011.05.31 end */

static struct sensor_reg awb_setting[] = {
//[Section5-Pre AWB settings]
{WRITE_REG_DATA16, 0x098E, 0x2C02},	// LOGICAL_ADDRESS_ACCESS [AWB_ALGO]
{WRITE_REG_DATA16, 0xAC02, 0x00FF},	// AWB_ALGO
{WRITE_REG_DATA8,  0xAC01, 0xAB  },	// AWB_MODE
{WRITE_REG_DATA8,  0xAC3C, 0x39  },	// AWB_MIN_ACCEPTED_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC3D, 0x6E  },	// AWB_MAX_ACCEPTED_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC3E, 0x28  },	// AWB_MIN_ACCEPTED_PRE_AWB_B2G_RATIO
{WRITE_REG_DATA8,  0xAC3F, 0x6B  },	// AWB_MAX_ACCEPTED_PRE_AWB_B2G_RATIO
{WRITE_REG_DATA8,  0xAC40, 0x64  },	// AWB_MIN_ACCEPTED_POST_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC41, 0x66  },	// AWB_MAX_ACCEPTED_POST_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC42, 0x64  },	// AWB_MIN_ACCEPTED_POST_AWB_B2G_RATIO
{WRITE_REG_DATA8,  0xAC43, 0x66  },	// AWB_MAX_ACCEPTED_POST_AWB_B2G_RATIO
{WRITE_REG_DATA8,  0xACB0, 0x31  },	// AWB_RG_MIN
{WRITE_REG_DATA8,  0xACB1, 0x5F  },	// AWB_RG_MAX
{WRITE_REG_DATA8,  0xACB4, 0x22  },	// AWB_BG_MIN
{WRITE_REG_DATA8,  0xACB5, 0x5B  },	// AWB_BG_MAX
/* Compal Indigo-Carl 2011.09.01 tune ++ */
// modified Pre-AWB setting, fix AWB failed when ponit camera to A Light
{WRITE_REG_DATA8, 0xACB2, 0x38  }, 	// AWB_RG_MIN_BRIGHT  //0x41, 0x38
{WRITE_REG_DATA8, 0xACB3, 0x48  }, 	// AWB_RG_MAX_BRIGHT  //0x43, 0x48
{WRITE_REG_DATA8, 0xACB6, 0x38  }, 	// AWB_BG_MIN_BRIGHT  //0x4E, 0x38
{WRITE_REG_DATA8, 0xACB7, 0x48  }, 	// AWB_BG_MAX_BRIGHT  //0x50, 0x48
{WRITE_REG_DATA16, 0xACB8, 0x00D0}, 	// AWB_START_NUM_INT_LINES  //0x0032, 0x00D0
{WRITE_REG_DATA16, 0xACBA, 0x0090}, 	// AWB_END_NUM_INT_LINES  //0x000A, 0x0090
{WRITE_REG_DATA8, 0xAC09, 0x01 	},	// AWB_UNUSED1
{WRITE_REG_DATA16, 0xAC22, 0x0000},  	// AWB_UNUSED2
/* Compal Indigo-Carl 2011.09.01 tune -- */
// CCM
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xAC46, 0x0235},	// AWB_LEFT_CCM_0
{WRITE_REG_DATA16, 0xAC48, 0xFE7C},	// AWB_LEFT_CCM_1
{WRITE_REG_DATA16, 0xAC4A, 0xFFEC},	// AWB_LEFT_CCM_2
{WRITE_REG_DATA16, 0xAC4C, 0xFFBB},	// AWB_LEFT_CCM_3
{WRITE_REG_DATA16, 0xAC4E, 0x0196},	// AWB_LEFT_CCM_4
{WRITE_REG_DATA16, 0xAC50, 0xFFB0},	// AWB_LEFT_CCM_5
{WRITE_REG_DATA16, 0xAC52, 0xFFEC},	// AWB_LEFT_CCM_6
{WRITE_REG_DATA16, 0xAC54, 0xFE92},	// AWB_LEFT_CCM_7
{WRITE_REG_DATA16, 0xAC56, 0x0282},	// AWB_LEFT_CCM_8
{WRITE_REG_DATA16, 0xAC58, 0x00C6},	// AWB_LEFT_CCM_R2BRATIO
*/
{WRITE_REG_DATA16, 0xAC46, 0x029E},     // AWB_LEFT_CCM_0
{WRITE_REG_DATA16, 0xAC48, 0xFE73},     // AWB_LEFT_CCM_1
{WRITE_REG_DATA16, 0xAC4A, 0xFFF2},     // AWB_LEFT_CCM_2
{WRITE_REG_DATA16, 0xAC4C, 0xFF74},     // AWB_LEFT_CCM_3
{WRITE_REG_DATA16, 0xAC4E, 0x01FE},     // AWB_LEFT_CCM_4
{WRITE_REG_DATA16, 0xAC50, 0xFF91},     // AWB_LEFT_CCM_5
{WRITE_REG_DATA16, 0xAC52, 0xFFF1},     // AWB_LEFT_CCM_6
{WRITE_REG_DATA16, 0xAC54, 0xFE6C},     // AWB_LEFT_CCM_7
{WRITE_REG_DATA16, 0xAC56, 0x02A5},     // AWB_LEFT_CCM_8
{WRITE_REG_DATA16, 0xAC58, 0x00C6},     // AWB_LEFT_CCM_R2BRATIO
/* Compal Indigo-Carl 2011.09.01 tune -- */
// -- Rev1, 02232011, Alias
// modified CCM table for D65
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xAC5C, 0x01CE},	// AWB_RIGHT_CCM_0
{WRITE_REG_DATA16, 0xAC5E, 0xFEB9},	// AWB_RIGHT_CCM_1
{WRITE_REG_DATA16, 0xAC60, 0x0015},	// AWB_RIGHT_CCM_2
{WRITE_REG_DATA16, 0xAC62, 0xFF9A},	// AWB_RIGHT_CCM_3
{WRITE_REG_DATA16, 0xAC64, 0x019E},	// AWB_RIGHT_CCM_4
{WRITE_REG_DATA16, 0xAC66, 0xFFC8},	// AWB_RIGHT_CCM_5
{WRITE_REG_DATA16, 0xAC68, 0x000B},	// AWB_RIGHT_CCM_6
{WRITE_REG_DATA16, 0xAC6A, 0xFF0B},	// AWB_RIGHT_CCM_7
{WRITE_REG_DATA16, 0xAC6C, 0x0213},	// AWB_RIGHT_CCM_8
{WRITE_REG_DATA16, 0xAC6E, 0x0069},	// AWB_RIGHT_CCM_R2BRATIO
*/
{WRITE_REG_DATA16, 0xAC5C, 0x01F6},     // AWB_RIGHT_CCM_0
{WRITE_REG_DATA16, 0xAC5E, 0xFEBB},     // AWB_RIGHT_CCM_1
{WRITE_REG_DATA16, 0xAC60, 0x0014},     // AWB_RIGHT_CCM_2
{WRITE_REG_DATA16, 0xAC62, 0xFFA2},     // AWB_RIGHT_CCM_3
{WRITE_REG_DATA16, 0xAC64, 0x0191},     // AWB_RIGHT_CCM_4
{WRITE_REG_DATA16, 0xAC66, 0xFFCD},     // AWB_RIGHT_CCM_5
{WRITE_REG_DATA16, 0xAC68, 0x000D},     // AWB_RIGHT_CCM_6
{WRITE_REG_DATA16, 0xAC6A, 0xFF1E},     // AWB_RIGHT_CCM_7
{WRITE_REG_DATA16, 0xAC6C, 0x01FC},     // AWB_RIGHT_CCM_8
{WRITE_REG_DATA16, 0xAC6E, 0x0069},     // AWB_RIGHT_CCM_R2BRATIO
/* Compal Indigo-Carl 2011.09.01 tune -- */
{WRITE_REG_DATA8,  0xAC97, 0x73  },	// AWB_LEFT_TINT_COEF_FOR_CCM_ROW_0
{WRITE_REG_DATA8,  0xAC99, 0x8A  },	// AWB_LEFT_TINT_COEF_FOR_CCM_ROW_2
{WRITE_REG_DATA8,  0xB83E, 0x00  },	// STAT_AWB_WINDOW_POS_X
{WRITE_REG_DATA8,  0xB83F, 0x00  },	// STAT_AWB_WINDOW_POS_Y
{WRITE_REG_DATA8,  0xB840, 0xFF  },	// STAT_AWB_WINDOW_SIZE_X
{WRITE_REG_DATA8,  0xB841, 0xEF  },	// STAT_AWB_WINDOW_SIZE_Y
{WRITE_REG_DATA8,  0x8404, 0x05  },	// SEQ_CMD  // Compal 0622
// -- Rev1, 02232011, Alias
// modified gray checker offset
/* Compal Indigo-Carl 2011.09.01 tune ++ */
{WRITE_REG_DATA16, 0xB842, 0x0037},	// STAT_AWB_GRAY_CHECKER_OFFSET_X  //0x0038
{WRITE_REG_DATA16, 0xB844, 0x0044},	// STAT_AWB_GRAY_CHECKER_OFFSET_Y  //0x003A
/* Compal Indigo-Carl 2011.09.01 tune -- */
// -- Rev1, 02232011, Alias
// modified gray checker scale
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0x3240, 0x0024},	// AWB_XY_SCALE
{WRITE_REG_DATA16, 0x3242, 0x0000},	// AWB_WEIGHT_R0
{WRITE_REG_DATA16, 0x3244, 0x1550},	// AWB_WEIGHT_R1
{WRITE_REG_DATA16, 0x3246, 0x1F00},	// AWB_WEIGHT_R2
{WRITE_REG_DATA16, 0x3248, 0x7380},	// AWB_WEIGHT_R3
{WRITE_REG_DATA16, 0x324A, 0x70E0},	// AWB_WEIGHT_R4
{WRITE_REG_DATA16, 0x324C, 0x01F0},	// AWB_WEIGHT_R5
{WRITE_REG_DATA16, 0x324E, 0x006B},	// AWB_WEIGHT_R6
{WRITE_REG_DATA16, 0x3250, 0x0055},	// AWB_WEIGHT_R7
*/
{WRITE_REG_DATA16, 0x3240, 0x0024},     // AWB_XY_SCALE
{WRITE_REG_DATA16, 0x3242, 0x0000},     // AWB_WEIGHT_R0
{WRITE_REG_DATA16, 0x3244, 0x0000},     // AWB_WEIGHT_R1
{WRITE_REG_DATA16, 0x3246, 0x0000},     // AWB_WEIGHT_R2
{WRITE_REG_DATA16, 0x3248, 0x7F00},     // AWB_WEIGHT_R3
{WRITE_REG_DATA16, 0x324A, 0xA500},     // AWB_WEIGHT_R4
{WRITE_REG_DATA16, 0x324C, 0x1540},     // AWB_WEIGHT_R5
{WRITE_REG_DATA16, 0x324E, 0x01AC},     // AWB_WEIGHT_R6
{WRITE_REG_DATA16, 0x3250, 0x003E},     // AWB_WEIGHT_R7
/* Compal Indigo-Carl 2011.09.01 tune -- */
//[Gray World AWB settings-a]
{WRITE_REG_DATA16, 0x098E, 0xAC0E},	// LOGICAL_ADDRESS_ACCESS [AWB_CCM_SATURATION]
{WRITE_REG_DATA8,  0x8404, 0x05  },     // SEQ_CMD  // Compal Carl 2011.06.22
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg pa_calib[] = {
//PA Calib
{WRITE_REG_DATA16, 0x301A, 0x10F4},	// RESET_REGISTER
{WRITE_REG_DATA16, 0x301E, 0x0083},	// DATA_PEDESTAL
{WRITE_REG_DATA16, 0x301A, 0x1074},	// RESET_REGISTER  //0x10FC  //Compal Carl 2011.08.25 for color dot
{WRITE_REG_DATA8,  0xDC33, 0x20  },	// SYS_FIRST_BLACK_LEVEL
{WRITE_REG_DATA8,  0xDC35, 0x04  },	// SYS_UV_COLOR_BOOST
{WRITE_REG_DATA16, 0x326E, 0x0006},	// LOW_PASS_YUV_FILTER
{WRITE_REG_DATA8,  0xDC37, 0x62  },	// SYS_BRIGHT_COLORKILL
{WRITE_REG_DATA16, 0x35A4, 0x0596},	// BRIGHT_COLOR_KILL_CONTROLS
{WRITE_REG_DATA16, 0x35A2, 0x009C},	// DARK_COLOR_KILL_CONTROLS
{WRITE_REG_DATA16, 0xDC02, 0x003E},	// SYS_ALGO
{WRITE_REG_DATA8,  0xDC36, 0x34  },	// SYS_DARK_COLOR_KILL
//[AE settings]
/* Compal Carl 2011.06.22 tune ++ */
{WRITE_REG_DATA8,  0xB820, 0x26  },     // STAT_AE_WINDOW_POS_X
{WRITE_REG_DATA8,  0xB821, 0x26  },     // STAT_AE_WINDOW_POS_Y
{WRITE_REG_DATA8,  0xB822, 0xB5  },     // STAT_AE_WINDOW_SIZE_X
{WRITE_REG_DATA8,  0xB823, 0xB5  },     // STAT_AE_WINDOW_SIZE_Y
/* Compal Carl 2011.06.22 tune -- */
{WRITE_REG_DATA16, 0xA802, 0x0007},	// AE_TRACK_ALGO
{WRITE_REG_DATA8,  0xA80E, 0x08  },	// AE_TRACK_MAX_BLACK_LEVEL
// modified for AE -- over exposure in outdoor
//{WRITE_REG_DATA8,  0xA805, 0x04  },	// AE_TRACK_GATE
//{WRITE_REG_DATA8,  0xA401, 0x0C  },	// AE_RULE_MODE
{WRITE_REG_DATA16, 0xA818, 0x0298},	// AE_TRACK_TARGET_INT_TIME_ROWS
{WRITE_REG_DATA8,  0xB827, 0x0F  },	// STAT_AE_EV_SHIFT	-- changed back to Rev1
{WRITE_REG_DATA8,  0x840E, 0x02  },	// SEQ_STATE_CFG_0_AE	-- changed back to Rev1
{WRITE_REG_DATA8,  0x8416, 0x02  },	// SEQ_STATE_CFG_1_AE	-- changed back to Rev1
{WRITE_REG_DATA8,  0x841E, 0x02  },	// SEQ_STATE_CFG_2_AE	-- changed back to Rev1
{WRITE_REG_DATA16, 0xBC52, 0x00C8},	// LL_START_BRIGHTNESS_METRIC
{WRITE_REG_DATA16, 0xBC54, 0x03E8},	// LL_END_BRIGHTNESS_METRIC
{WRITE_REG_DATA16, 0xBC58, 0x00C8},	// LL_START_GAIN_METRIC
{WRITE_REG_DATA16, 0xBC5A, 0x0728},	// LL_END_GAIN_METRIC
{WRITE_REG_DATA16, 0xBC5E, 0x00FA},	// LL_START_APERTURE_GAIN_BM
{WRITE_REG_DATA16, 0xBC60, 0x028A},	// LL_END_APERTURE_GAIN_BM  // origin: 0x028A  //Compal Carl 2011.06.22
{WRITE_REG_DATA16, 0xBC66, 0x00FA},	// LL_START_APERTURE_GM
{WRITE_REG_DATA16, 0xBC68, 0x028A},	// LL_END_APERTURE_GM  // origin: 0x028A  //Compal Carl 2011.06.22
{WRITE_REG_DATA16, 0xBC86, 0x00C8},	// LL_START_FFNR_GM
{WRITE_REG_DATA16, 0xBC88, 0x028A},	// LL_END_FFNR_GM
{WRITE_REG_DATA16, 0xBCBC, 0x0040},	// LL_SFFB_START_GAIN
{WRITE_REG_DATA16, 0xBCBE, 0x01FC},	// LL_SFFB_END_GAIN
{WRITE_REG_DATA16, 0xBCCC, 0x00C8},	// LL_SFFB_START_MAX_GM
{WRITE_REG_DATA16, 0xBCCE, 0x028A},	// LL_SFFB_END_MAX_GM
{WRITE_REG_DATA16, 0xBC90, 0x00C8},	// LL_START_GRB_GM
{WRITE_REG_DATA16, 0xBC92, 0x028A},	// LL_END_GRB_GM

{WRITE_REG_DATA16, 0xBCAA, 0x044C},	// LL_CDC_THR_ADJ_START_POS
{WRITE_REG_DATA16, 0xBCAC, 0x00AF},	// LL_CDC_THR_ADJ_MID_POS
{WRITE_REG_DATA16, 0xBCAE, 0x0009},	// LL_CDC_THR_ADJ_END_POS
{WRITE_REG_DATA16, 0xBCD8, 0x00C8},	// LL_PCR_START_BM
{WRITE_REG_DATA16, 0xBCDA, 0x0A28},	// LL_PCR_END_BM
{WRITE_REG_DATA16, 0x3380, 0x0585},	// KERNEL_CONFIG  //0x04CF //0x0587  //Compal Carl 2011.08.25 for color dot
{WRITE_REG_DATA8,  0xBC94, 0x12  },	// LL_GB_START_THRESHOLD_0
{WRITE_REG_DATA8,  0xBC95, 0x0C  },	// LL_GB_START_THRESHOLD_1
{WRITE_REG_DATA8,  0xBC9C, 0x37  },	// LL_GB_END_THRESHOLD_0
{WRITE_REG_DATA8,  0xBC9D, 0x24  },	// LL_GB_END_THRESHOLD_1
{WRITE_REG_DATA16, 0x33B0, 0x2A16},	// FFNR_ALPHA_BETA
{WRITE_REG_DATA8,  0xBC8A, 0x00  },	// LL_START_FF_MIX_THRESH_Y
{WRITE_REG_DATA8,  0xBC8B, 0x28  },	// LL_END_FF_MIX_THRESH_Y
{WRITE_REG_DATA8,  0xBC8C, 0x00  },	// LL_START_FF_MIX_THRESH_YGAIN
{WRITE_REG_DATA8,  0xBC8D, 0x01  },	// LL_END_FF_MIX_THRESH_YGAIN
{WRITE_REG_DATA8,  0xBC8E, 0x1F  },	// LL_START_FF_MIX_THRESH_GAIN
{WRITE_REG_DATA8,  0xBC8F, 0x00  },	// LL_END_FF_MIX_THRESH_GAIN
/* Compal Indigo-Carl 2011.08.25 tune ++ */
/* Color dot issue */
{WRITE_REG_DATA8,  0xBCC0, 0x1F  },	// LL_SFFB_RAMP_START
{WRITE_REG_DATA8,  0xBCC1, 0x03  },	// LL_SFFB_RAMP_STOP
{WRITE_REG_DATA8,  0xBCC2, 0x2C  },	// LL_SFFB_SLOPE_START
{WRITE_REG_DATA8,  0xBCC3, 0x10  },	// LL_SFFB_SLOPE_STOP
{WRITE_REG_DATA8,  0xBCC4, 0x07  },	// LL_SFFB_THSTART
{WRITE_REG_DATA8,  0xBCC5, 0x0B  },	// LL_SFFB_THSTOP
{WRITE_REG_DATA16, 0xBCBA, 0x0009},	// LL_SFFB_CONFIG
/*
{WRITE_REG_DATA8,  0xBCC0, 0x20  },	// LL_SFFB_RAMP_START
{WRITE_REG_DATA8,  0xBCC1, 0x03  },	// LL_SFFB_RAMP_STOP
{WRITE_REG_DATA8,  0xBCC2, 0x1E  },	// LL_SFFB_SLOPE_START
{WRITE_REG_DATA8,  0xBCC3, 0x0F  },	// LL_SFFB_SLOPE_STOP
{WRITE_REG_DATA8,  0xBCC4, 0x0A  },	// LL_SFFB_THSTART
{WRITE_REG_DATA8,  0xBCC5, 0xAF  },	// LL_SFFB_THSTOP
{WRITE_REG_DATA16, 0xBCBA, 0x0009},	// LL_SFFB_CONFIG
*/
/* Compal Indigo-Carl 2011.08.25 tune -- */
// FTB setup
{WRITE_REG_DATA8,  0xBC6A, 0x09  },	// LL_START_APERTURE_INTEGER_GAIN  //0x04, 0x09, 0x0F  //Compal Carl 2011.08.31
{WRITE_REG_DATA8,  0xBC6B, 0x00  },	// LL_END_APERTURE_INTEGER_GAIN
{WRITE_REG_DATA8,  0xBC6C, 0x00  },	// LL_START_APERTURE_EXP_GAIN
{WRITE_REG_DATA8,  0xBC6D, 0x00  },	// LL_END_APERTURE_EXP_GAIN
{WRITE_REG_DATA8,  0xBCE2, 0x0A  },	// LL_START_POS_KNEE
{WRITE_REG_DATA8,  0xBCE3, 0x30  },	// LL_END_POS_KNEE
{WRITE_REG_DATA8,  0xBCE4, 0x0A  },	// LL_START_NEG_KNEE
{WRITE_REG_DATA8,  0xBCE5, 0x30  },	// LL_END_NEG_KNEE
{WRITE_REG_DATA16, 0x33BA, 0x001F},	// APEDGE_CONTROL
{WRITE_REG_DATA16, 0x33BE, 0x0000},	// UA_KNEE_L
{WRITE_REG_DATA16, 0x33C2, 0x4300},	// UA_WEIGHTS
{WRITE_REG_DATA8,  0xBC62, 0x0E  },	// LL_START_APERTURE_KPGAIN
{WRITE_REG_DATA8,  0xBC63, 0x1C  },	// LL_END_APERTURE_KPGAIN
{WRITE_REG_DATA8,  0xBC64, 0x0E  },	// LL_START_APERTURE_KNGAIN
{WRITE_REG_DATA8,  0xBC65, 0x1C  },	// LL_END_APERTURE_KNGAIN

{WRITE_REG_DATA16, 0x098E, 0x281A},	// LOGICAL_ADDRESS_ACCESS[AE_TRACK_MAX_INT_TIME_ROWS]

/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xA81C, 0x0040},	// AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x0180},	// AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0200},	// AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},	// AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},	// AE_TRACK_MAX_DGAIN
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},     // 30 fps
{WRITE_REG_DATA8,  0xA409, 0x40  },	// AE_RULE_BASE_TARGET	-- changed AE target  //0x40
*/
{WRITE_REG_DATA16, 0xA81C, 0x0080},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x00D0},	// AE_TRACK_TARGET_AGAIN  //0x0056 //0x0150
{WRITE_REG_DATA16, 0xA820, 0x0120},	// AE_TRACK_MAX_AGAIN  //0x0100 //0x0200
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN  //0x0100 //0x0140
//Sandow++ 2011.12.30 Solve low fps in camcorder issue
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// AE_TRACK_MAX_INT_TIME_ROWS  //30fps
//Snaodw--
{WRITE_REG_DATA8,  0xA409, 0x46  },	// AE_RULE_BASE_TARGET  -- changed AE target  //0x46
/* Compal Indigo-Carl 2011.09.01 tune -- */

// Saturation
{WRITE_REG_DATA16, 0xBC02, 0x017E},	// LL_ALGO
{WRITE_REG_DATA8,  0xBC56, 0x90  },	// LL_START_CCM_SATURATION
{WRITE_REG_DATA8,  0xBC57, 0x55  },	// LL_END_CCM_SATURATION
{WRITE_REG_DATA8,  0xBCDE, 0x03  },	// LL_START_SYS_THRESHOLD
{WRITE_REG_DATA8,  0xBCDF, 0x50  },	// LL_STOP_SYS_THRESHOLD
{WRITE_REG_DATA8,  0xBCE0, 0x08  },	// LL_START_SYS_GAIN
{WRITE_REG_DATA8,  0xBCE1, 0x03  },	// LL_STOP_SYS_GAIN
{WRITE_REG_DATA16, 0xBCD0, 0x000A},	// LL_SFFB_SOBEL_FLAT_START
{WRITE_REG_DATA16, 0xBCD2, 0x00CC},	// LL_SFFB_SOBEL_FLAT_STOP
{WRITE_REG_DATA16, 0xBCD4, 0x001E},	// LL_SFFB_SOBEL_SHARP_START
{WRITE_REG_DATA16, 0xBCD6, 0x00FF},	// LL_SFFB_SOBEL_SHARP_STOP
{WRITE_REG_DATA8,  0xBCC6, 0x00  },	// LL_SFFB_SHARPENING_START
{WRITE_REG_DATA8,  0xBCC7, 0x00  },	// LL_SFFB_SHARPENING_STOP
{WRITE_REG_DATA8,  0xBCC8, 0x2F  },	// LL_SFFB_FLATNESS_START
{WRITE_REG_DATA8,  0xBCC9, 0x40  },	// LL_SFFB_FLATNESS_STOP
{WRITE_REG_DATA8,  0xBCCA, 0x04  },	// LL_SFFB_TRANSITION_START
{WRITE_REG_DATA8,  0xBCCB, 0x00  },	// LL_SFFB_TRANSITION_STOP
{WRITE_REG_DATA8,  0xBCE6, 0x03  },	// LL_SFFB_ZERO_ENABLE
{WRITE_REG_DATA8,  0xC8ED, 0x03  },	// CAM_TX_ENABLE_MODE
{WRITE_REG_DATA16, 0x098E, 0x3C02},	// LOGICAL_ADDRESS_ACCESS

// Sharpness
//{WRITE_REG_DATA16, 0xBC60, 0x0400},	// LL_END_APERTURE_GAIN_BM
//{WRITE_REG_DATA16, 0xBC68, 0x0400},	// LL_END_APERTURE_GM
//{WRITE_REG_DATA8,  0xBC6A, 0x0F  },	// LL_START_APERTURE_INTEGER_GAIN  //0x09, 0x0F  //Compal 0801

// [gamma- neutral]
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/* use one gamma setting */
#if 0
{WRITE_REG_DATA16, 0x098E, 0x3C0E},	// LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_ADJ_START_POS]
{WRITE_REG_DATA16, 0xBC0E, 0x0001},	// LL_GAMMA_CURVE_ADJ_START_POS
{WRITE_REG_DATA16, 0xBC10, 0x00F0},	// LL_GAMMA_CURVE_ADJ_MID_POS
{WRITE_REG_DATA16, 0xBC12, 0x0700},	// LL_GAMMA_CURVE_ADJ_END_POS

{WRITE_REG_DATA8, 0xBC18, 0x00},	// LL_GAMMA_CONTRAST_CURVE_0
{WRITE_REG_DATA8, 0xBC19, 0x05},	// LL_GAMMA_CONTRAST_CURVE_1
{WRITE_REG_DATA8, 0xBC1A, 0x0F},	// LL_GAMMA_CONTRAST_CURVE_2
{WRITE_REG_DATA8, 0xBC1B, 0x2B},	// LL_GAMMA_CONTRAST_CURVE_3
{WRITE_REG_DATA8, 0xBC1C, 0x50},	// LL_GAMMA_CONTRAST_CURVE_4
{WRITE_REG_DATA8, 0xBC1D, 0x6B},	// LL_GAMMA_CONTRAST_CURVE_5
{WRITE_REG_DATA8, 0xBC1E, 0x82},	// LL_GAMMA_CONTRAST_CURVE_6
{WRITE_REG_DATA8, 0xBC1F, 0x96},	// LL_GAMMA_CONTRAST_CURVE_7
{WRITE_REG_DATA8, 0xBC20, 0xA6},	// LL_GAMMA_CONTRAST_CURVE_8
{WRITE_REG_DATA8, 0xBC21, 0xB4},	// LL_GAMMA_CONTRAST_CURVE_9
{WRITE_REG_DATA8, 0xBC22, 0xC0},	// LL_GAMMA_CONTRAST_CURVE_10
{WRITE_REG_DATA8, 0xBC23, 0xCB},	// LL_GAMMA_CONTRAST_CURVE_11
{WRITE_REG_DATA8, 0xBC24, 0xD4},	// LL_GAMMA_CONTRAST_CURVE_12
{WRITE_REG_DATA8, 0xBC25, 0xDD},	// LL_GAMMA_CONTRAST_CURVE_13
{WRITE_REG_DATA8, 0xBC26, 0xE5},	// LL_GAMMA_CONTRAST_CURVE_14
{WRITE_REG_DATA8, 0xBC27, 0xEC},	// LL_GAMMA_CONTRAST_CURVE_15
{WRITE_REG_DATA8, 0xBC28, 0xF3},	// LL_GAMMA_CONTRAST_CURVE_16
{WRITE_REG_DATA8, 0xBC29, 0xF9},	// LL_GAMMA_CONTRAST_CURVE_17
{WRITE_REG_DATA8, 0xBC2A, 0xFF},	// LL_GAMMA_CONTRAST_CURVE_18
#endif
/* 2012.01.10 tune ++ */
/*
{WRITE_REG_DATA8, 0xBC2B, 0x00},	// LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x05},	// LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x0F},	// LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x2B},	// LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x50},	// LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x6B},	// LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x82},	// LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x96},	// LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xA6},	// LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xB4},	// LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xC0},	// LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xCB},	// LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xD4},	// LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xDD},	// LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE5},	// LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEC},	// LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF3},	// LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF9},	// LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},	// LL_GAMMA_NEUTRAL_CURVE_18
*/
{WRITE_REG_DATA8, 0xBC2B, 0x00},	// LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x06},	// LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x14},	// LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x31},	// LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x53},	// LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x6E},	// LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x84},	// LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x98},	// LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xA7},	// LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xB5},	// LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xC1},	// LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xCB},	// LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xD5},	// LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xDD},	// LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE5},	// LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEC},	// LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF3},	// LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF9},	// LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},	// LL_GAMMA_NEUTRAL_CURVE_18
/* 2012.01.10 tune -- */
#if 0
{WRITE_REG_DATA8, 0xBC3E, 0x00},	// LL_GAMMA_NR_CURVE_0
{WRITE_REG_DATA8, 0xBC3F, 0x0A},	// LL_GAMMA_NR_CURVE_1
{WRITE_REG_DATA8, 0xBC40, 0x22},	// LL_GAMMA_NR_CURVE_2
{WRITE_REG_DATA8, 0xBC41, 0x61},	// LL_GAMMA_NR_CURVE_3
{WRITE_REG_DATA8, 0xBC42, 0x90},	// LL_GAMMA_NR_CURVE_4
{WRITE_REG_DATA8, 0xBC43, 0xA8},	// LL_GAMMA_NR_CURVE_5
{WRITE_REG_DATA8, 0xBC44, 0xB7},	// LL_GAMMA_NR_CURVE_6
{WRITE_REG_DATA8, 0xBC45, 0xC3},	// LL_GAMMA_NR_CURVE_7
{WRITE_REG_DATA8, 0xBC46, 0xCD},	// LL_GAMMA_NR_CURVE_8
{WRITE_REG_DATA8, 0xBC47, 0xD5},	// LL_GAMMA_NR_CURVE_9
{WRITE_REG_DATA8, 0xBC48, 0xDC},	// LL_GAMMA_NR_CURVE_10
{WRITE_REG_DATA8, 0xBC49, 0xE2},	// LL_GAMMA_NR_CURVE_11
{WRITE_REG_DATA8, 0xBC4A, 0xE7},	// LL_GAMMA_NR_CURVE_12
{WRITE_REG_DATA8, 0xBC4B, 0xEC},	// LL_GAMMA_NR_CURVE_13
{WRITE_REG_DATA8, 0xBC4C, 0xF0},	// LL_GAMMA_NR_CURVE_14
{WRITE_REG_DATA8, 0xBC4D, 0xF4},	// LL_GAMMA_NR_CURVE_15
{WRITE_REG_DATA8, 0xBC4E, 0xF8},	// LL_GAMMA_NR_CURVE_16
{WRITE_REG_DATA8, 0xBC4F, 0xFC},	// LL_GAMMA_NR_CURVE_17
{WRITE_REG_DATA8, 0xBC50, 0xFF},	// LL_GAMMA_NR_CURVE_18
#endif

//{WRITE_REG_DATA8, 0xBC51, 0x00},	// LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC51, 0x04},	// LL_GAMMA_CURVE_SELECTOR  //0x01(auto), 0x02(contrast), 0x04(neutral), 0x08(NR)
/* Compal Indigo-Carl 2011.09.01 tune -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg af_full_trigger[] = {
//[full scan trigger]
// Full scan with 2nd scan algorithm
{WRITE_REG_DATA16, 0x098E, 0xC400},
{WRITE_REG_DATA8,  0xC400, 0x88  },
{WRITE_REG_DATA8,  0x8419, 0x05  },
{WRITE_REG_DATA16, 0xB002, 0x0004},
{WRITE_REG_DATA8,  0x8404, 0x05  },	// SEQ_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 30   },
{WRITE_REG_DATA16, 0x098E, 0xC400},
{WRITE_REG_DATA8,  0xB006, 0x01  },
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg af_infinity[] = {
//[manual focus, place lens to focus infinity]
{WRITE_REG_DATA16, 0x098E, 0x8419},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_1_AF]
{WRITE_REG_DATA16, 0x0990, 0x01DC},
{WRITE_REG_DATA16, 0x098E, 0x8404},
{WRITE_REG_DATA16, 0x0990, 0x06dc},
{WRITE_REG_DATA16, 0x098E, 0xB007},
{WRITE_REG_DATA16, 0x0990, 0x0000},	// 00 means place lens to focus on infinity
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg char_settings[] = {
//[char setting]
{WRITE_REG_DATA16, 0x305E, 0x10A0},	// GLOBAL_GAIN
{WRITE_REG_DATA16, 0x30B6, 0x0008},	// AUTOLR_CONTROL
{WRITE_REG_DATA16, 0x30D4, 0x9080},	// COLUMN_CORRECTION
{WRITE_REG_DATA16, 0x316C, 0xB430},	// DAC_TXLO  //B43F //Compal to fix greenish
{WRITE_REG_DATA16, 0x316E, 0xC400},	// DAC_ECL
{WRITE_REG_DATA16, 0x31E0, 0x0003},	// PIX_DEF_ID  //0000 //Compal to fix color dot
{WRITE_REG_DATA16, 0x337C, 0x0006},	// YUV_YCBCR_CONTROL
{WRITE_REG_DATA16, 0x3E00, 0x0010},	// SAMP_CONTROL
{WRITE_REG_DATA16, 0x3E02, 0xED02},	// SAMP_ADDR_EN
{WRITE_REG_DATA16, 0x3E04, 0xC88C},	// SAMP_RD1_SIG
{WRITE_REG_DATA16, 0x3E06, 0xC88C},	// SAMP_RD1_SIG_BOOST
{WRITE_REG_DATA16, 0x3E08, 0x700A},	// SAMP_RD1_RST
{WRITE_REG_DATA16, 0x3E0A, 0x701E},	// SAMP_RD1_RST_BOOST
{WRITE_REG_DATA16, 0x3E0C, 0x00FF},	// SAMP_RST1_EN
{WRITE_REG_DATA16, 0x3E0E, 0x00FF},	// SAMP_RST1_BOOST
{WRITE_REG_DATA16, 0x3E10, 0x00FF},	// SAMP_RST1_CLOOP_SH
{WRITE_REG_DATA16, 0x3E12, 0x0000},	// SAMP_RST_BOOST_SEQ
{WRITE_REG_DATA16, 0x3E14, 0xC78C},	// SAMP_SAMP1_SIG
{WRITE_REG_DATA16, 0x3E16, 0x6E06},	// SAMP_SAMP1_RST
{WRITE_REG_DATA16, 0x3E18, 0xA58C},	// SAMP_TX_EN
{WRITE_REG_DATA16, 0x3E1A, 0xA58E},	// SAMP_TX_BOOST  //A58E //A56E //Compal to fix greenish
{WRITE_REG_DATA16, 0x3E1C, 0xA58E},	// SAMP_TX_CLOOP_SH
{WRITE_REG_DATA16, 0x3E1E, 0xC0D0},	// SAMP_TX_BOOST_SEQ
{WRITE_REG_DATA16, 0x3E20, 0xEB00},	// SAMP_VLN_EN
{WRITE_REG_DATA16, 0x3E22, 0x00FF},	// SAMP_VLN_HOLD
{WRITE_REG_DATA16, 0x3E24, 0xEB02},	// SAMP_VCL_EN
{WRITE_REG_DATA16, 0x3E26, 0xEA02},	// SAMP_COLCLAMP
{WRITE_REG_DATA16, 0x3E28, 0xEB0A},	// SAMP_SH_VCL
{WRITE_REG_DATA16, 0x3E2A, 0xEC01},	// SAMP_SH_VREF
{WRITE_REG_DATA16, 0x3E2C, 0xEB01},	// SAMP_SH_VBST
{WRITE_REG_DATA16, 0x3E2E, 0xF319},	// SAMP_SPARE  //EC05 //F928 //EA19 //Compal to fix greenish
{WRITE_REG_DATA16, 0x3E30, 0x00F3},	// SAMP_READOUT
{WRITE_REG_DATA16, 0x3E32, 0x3DFA},	// SAMP_RESET_DONE
{WRITE_REG_DATA16, 0x3E34, 0x00FF},	// SAMP_VLN_CLAMP
{WRITE_REG_DATA16, 0x3E36, 0x00F3},	// SAMP_ASC_INT
{WRITE_REG_DATA16, 0x3E38, 0x0000},	// SAMP_RS_CLOOP_SH_R
{WRITE_REG_DATA16, 0x3E3A, 0xF802},	// SAMP_RS_CLOOP_SH
{WRITE_REG_DATA16, 0x3E3C, 0x0FFF},	// SAMP_RS_BOOST_SEQ
{WRITE_REG_DATA16, 0x3E3E, 0xEA10},	// SAMP_TXLO_GND
{WRITE_REG_DATA16, 0x3E40, 0xEB05},	// SAMP_VLN_PER_COL
{WRITE_REG_DATA16, 0x3E42, 0xE5C8},	// SAMP_RD2_SIG
{WRITE_REG_DATA16, 0x3E44, 0xE5C8},	// SAMP_RD2_SIG_BOOST
{WRITE_REG_DATA16, 0x3E46, 0x8C70},	// SAMP_RD2_RST
{WRITE_REG_DATA16, 0x3E48, 0x8C71},	// SAMP_RD2_RST_BOOST
{WRITE_REG_DATA16, 0x3E4A, 0x00FF},	// SAMP_RST2_EN
{WRITE_REG_DATA16, 0x3E4C, 0x00FF},	// SAMP_RST2_BOOST
{WRITE_REG_DATA16, 0x3E4E, 0x00FF},	// SAMP_RST2_CLOOP_SH
{WRITE_REG_DATA16, 0x3E50, 0xE38D},	// SAMP_SAMP2_SIG
{WRITE_REG_DATA16, 0x3E52, 0x8B0A},	// SAMP_SAMP2_RST
{WRITE_REG_DATA16, 0x3E58, 0xEB0A},	// SAMP_PIX_CLAMP_EN
{WRITE_REG_DATA16, 0x3E5C, 0x0A00},	// SAMP_PIX_PULLUP_EN
{WRITE_REG_DATA16, 0x3E5E, 0x00FF},	// SAMP_PIX_PULLDOWN_EN_R
{WRITE_REG_DATA16, 0x3E60, 0x00FF},	// SAMP_PIX_PULLDOWN_EN_S
{WRITE_REG_DATA16, 0x3E90, 0x3C01},	// RST_ADDR_EN
{WRITE_REG_DATA16, 0x3E92, 0x00FF},	// RST_RST_EN
{WRITE_REG_DATA16, 0x3E94, 0x00FF},	// RST_RST_BOOST
{WRITE_REG_DATA16, 0x3E96, 0x3C00},	// RST_TX_EN
{WRITE_REG_DATA16, 0x3E98, 0x3C00},	// RST_TX_BOOST
{WRITE_REG_DATA16, 0x3E9A, 0x3C00},	// RST_TX_CLOOP_SH
{WRITE_REG_DATA16, 0x3E9C, 0xC0E0},	// RST_TX_BOOST_SEQ
{WRITE_REG_DATA16, 0x3E9E, 0x00FF},	// RST_RST_CLOOP_SH
{WRITE_REG_DATA16, 0x3EA0, 0x0000},	// RST_RST_BOOST_SEQ
{WRITE_REG_DATA16, 0x3EA6, 0x3C00},	// RST_PIX_PULLUP_EN
{WRITE_REG_DATA16, 0x3ED0, 0x2409},	// DAC_LD_4_5
{WRITE_REG_DATA16, 0x3ED2, 0xEA0A},	// DAC_LD_6_7
{WRITE_REG_DATA16, 0x3ED4, 0x00A3},	// DAC_LD_8_9
{WRITE_REG_DATA16, 0x3ED8, 0x3057},	// DAC_LD_12_13
{WRITE_REG_DATA16, 0x3EDA, 0x2020},	// DAC_LD_14_15  //0x6060
{WRITE_REG_DATA16, 0x3EDC, 0x6020},	// DAC_LD_16_17
{WRITE_REG_DATA16, 0x3EDE, 0x0A49},	// DAC_LD_18_19
{WRITE_REG_DATA16, 0x3EE0, 0x4910},	// DAC_LD_20_21
{WRITE_REG_DATA16, 0x3EE2, 0x09D2},	// DAC_LD_22_23
{WRITE_REG_DATA16, 0x3EE6, 0xA7C1},	// DAC_LD_26_27  //A5C0
#if 0
/* Compal Indigo-Carl 2011.09.14 tune ++ */
{WRITE_REG_DATA16, 0x3E1A, 0xA56E},     // SAMP_TX_BOOST
{WRITE_REG_DATA16, 0x3E2E, 0xEA19},     // SAMP_SPARE
{WRITE_REG_DATA16, 0x3EE6, 0xA5C0},     // DAC_LD_26_27
{WRITE_REG_DATA16, 0x316C, 0xB430},     // DAC_TXLO
{WRITE_REG_DATA16, 0x3E1A, 0xA58E},     // SAMP_TX_BOOST
{WRITE_REG_DATA16, 0x3E2E, 0xF319},     // SAMP_SPARE
{WRITE_REG_DATA16, 0x3EE6, 0xA7C1},     // DAC_LD_26_27
{WRITE_REG_DATA16, 0x316C, 0xB430},     // DAC_TXLO
{WRITE_REG_DATA16, 0x31E0, 0x0003},     // PIX_DEF_ID [color dot issue]
/* Compal Indigo-Carl 2011.09.14 tune -- */
#endif
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg af_load_fw[] = {
//[k28a_rev3_FW_patch]
{WRITE_REG_DATA16, 0x0982, 0x0000},	// ACCESS_CTL_STAT
{WRITE_REG_DATA16, 0x098A, 0x0000},	// PHYSICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0x886C, 0xC0F1},
{WRITE_REG_DATA16, 0x886E, 0xC5E1},
{WRITE_REG_DATA16, 0x8870, 0x246A},
{WRITE_REG_DATA16, 0x8872, 0x1280},
{WRITE_REG_DATA16, 0x8874, 0xC4E1},
{WRITE_REG_DATA16, 0x8876, 0xD20F},
{WRITE_REG_DATA16, 0x8878, 0x2069},
{WRITE_REG_DATA16, 0x887A, 0x0000},
{WRITE_REG_DATA16, 0x887C, 0x6A62},
{WRITE_REG_DATA16, 0x887E, 0x1303},
{WRITE_REG_DATA16, 0x8880, 0x0084},
{WRITE_REG_DATA16, 0x8882, 0x1734},
{WRITE_REG_DATA16, 0x8884, 0x7005},
{WRITE_REG_DATA16, 0x8886, 0xD801},
{WRITE_REG_DATA16, 0x8888, 0x8A41},
{WRITE_REG_DATA16, 0x888A, 0xD900},
{WRITE_REG_DATA16, 0x888C, 0x0D5A},
{WRITE_REG_DATA16, 0x888E, 0x0664},
{WRITE_REG_DATA16, 0x8890, 0x8B61},
{WRITE_REG_DATA16, 0x8892, 0xE80B},
{WRITE_REG_DATA16, 0x8894, 0x000D},
{WRITE_REG_DATA16, 0x8896, 0x0020},
{WRITE_REG_DATA16, 0x8898, 0xD508},
{WRITE_REG_DATA16, 0x889A, 0x1504},
{WRITE_REG_DATA16, 0x889C, 0x1400},
{WRITE_REG_DATA16, 0x889E, 0x7840},
{WRITE_REG_DATA16, 0x88A0, 0xD007},
{WRITE_REG_DATA16, 0x88A2, 0x0DFB},
{WRITE_REG_DATA16, 0x88A4, 0x9004},
{WRITE_REG_DATA16, 0x88A6, 0xC4C1},
{WRITE_REG_DATA16, 0x88A8, 0x2029},
{WRITE_REG_DATA16, 0x88AA, 0x0300},
{WRITE_REG_DATA16, 0x88AC, 0x0219},
{WRITE_REG_DATA16, 0x88AE, 0x06C4},
{WRITE_REG_DATA16, 0x88B0, 0xFF80},
{WRITE_REG_DATA16, 0x88B2, 0x08C8},
{WRITE_REG_DATA16, 0x88B4, 0xFF80},
{WRITE_REG_DATA16, 0x88B6, 0x086C},
{WRITE_REG_DATA16, 0x88B8, 0xFF80},
{WRITE_REG_DATA16, 0x88BA, 0x08C0},
{WRITE_REG_DATA16, 0x88BC, 0xFF80},
{WRITE_REG_DATA16, 0x88BE, 0x08C8},
{WRITE_REG_DATA16, 0x88C0, 0xFF80},
{WRITE_REG_DATA16, 0x88C2, 0x0C98},
{WRITE_REG_DATA16, 0x88C4, 0xFF80},
{WRITE_REG_DATA16, 0x88C6, 0x0AF8},
{WRITE_REG_DATA16, 0x88C8, 0x0005},
{WRITE_REG_DATA16, 0x88CA, 0x0004},
{WRITE_REG_DATA16, 0x88CC, 0x0000},
{WRITE_REG_DATA16, 0x88CE, 0x0000},
{WRITE_REG_DATA16, 0x88D0, 0xD1B4},
{WRITE_REG_DATA16, 0x88D2, 0xD2B5},
{WRITE_REG_DATA16, 0x88D4, 0x11B2},
{WRITE_REG_DATA16, 0x88D6, 0x8903},
{WRITE_REG_DATA16, 0x88D8, 0x1252},
{WRITE_REG_DATA16, 0x88DA, 0x0100},
{WRITE_REG_DATA16, 0x88DC, 0x7B6F},
{WRITE_REG_DATA16, 0x88DE, 0xB808},
{WRITE_REG_DATA16, 0x88E0, 0x2004},
{WRITE_REG_DATA16, 0x88E2, 0x0F80},
{WRITE_REG_DATA16, 0x88E4, 0x0000},
{WRITE_REG_DATA16, 0x88E6, 0xFF00},
{WRITE_REG_DATA16, 0x88E8, 0x7865},
{WRITE_REG_DATA16, 0x88EA, 0x19B2},
{WRITE_REG_DATA16, 0x88EC, 0x8024},
{WRITE_REG_DATA16, 0x88EE, 0xD0AF},
{WRITE_REG_DATA16, 0x88F0, 0x8801},
{WRITE_REG_DATA16, 0x88F2, 0xB8E1},
{WRITE_REG_DATA16, 0x88F4, 0xD800},
{WRITE_REG_DATA16, 0x88F6, 0xF404},
{WRITE_REG_DATA16, 0x88F8, 0x1234},
{WRITE_REG_DATA16, 0x88FA, 0x0080},
{WRITE_REG_DATA16, 0x88FC, 0x1955},
{WRITE_REG_DATA16, 0x88FE, 0x803C},
{WRITE_REG_DATA16, 0x8900, 0x1233},
{WRITE_REG_DATA16, 0x8902, 0x0080},
{WRITE_REG_DATA16, 0x8904, 0xB802},
{WRITE_REG_DATA16, 0x8906, 0x1957},
{WRITE_REG_DATA16, 0x8908, 0x803C},
{WRITE_REG_DATA16, 0x890A, 0x1958},
{WRITE_REG_DATA16, 0x890C, 0x803C},
{WRITE_REG_DATA16, 0x890E, 0x1959},
{WRITE_REG_DATA16, 0x8910, 0x803C},
{WRITE_REG_DATA16, 0x8912, 0x195A},
{WRITE_REG_DATA16, 0x8914, 0x803C},
{WRITE_REG_DATA16, 0x8916, 0x7EE0},
{WRITE_REG_DATA16, 0x8918, 0xC0F1},
{WRITE_REG_DATA16, 0x891A, 0x0936},
{WRITE_REG_DATA16, 0x891C, 0x06C4},
{WRITE_REG_DATA16, 0x891E, 0xD5A4},
{WRITE_REG_DATA16, 0x8920, 0x8D2C},
{WRITE_REG_DATA16, 0x8922, 0x0983},
{WRITE_REG_DATA16, 0x8924, 0x0010},
{WRITE_REG_DATA16, 0x8926, 0xD2A1},
{WRITE_REG_DATA16, 0x8928, 0x123A},
{WRITE_REG_DATA16, 0x892A, 0x0083},
{WRITE_REG_DATA16, 0x892C, 0x123B},
{WRITE_REG_DATA16, 0x892E, 0x008F},
{WRITE_REG_DATA16, 0x8930, 0x8D55},
{WRITE_REG_DATA16, 0x8932, 0xBB08},
{WRITE_REG_DATA16, 0x8934, 0x7BE5},
{WRITE_REG_DATA16, 0x8936, 0x8DF6},
{WRITE_REG_DATA16, 0x8938, 0xBA08},
{WRITE_REG_DATA16, 0x893A, 0x7AE5},
{WRITE_REG_DATA16, 0x893C, 0x0B0D},
{WRITE_REG_DATA16, 0x893E, 0x00A3},
{WRITE_REG_DATA16, 0x8940, 0x8DC5},
{WRITE_REG_DATA16, 0x8942, 0x8D54},
{WRITE_REG_DATA16, 0x8944, 0xAD45},
{WRITE_REG_DATA16, 0x8946, 0xF026},
{WRITE_REG_DATA16, 0x8948, 0x65DB},
{WRITE_REG_DATA16, 0x894A, 0x8B6D},
{WRITE_REG_DATA16, 0x894C, 0x0815},
{WRITE_REG_DATA16, 0x894E, 0x00E2},
{WRITE_REG_DATA16, 0x8950, 0x65DA},
{WRITE_REG_DATA16, 0x8952, 0x8A51},
{WRITE_REG_DATA16, 0x8954, 0x0A0D},
{WRITE_REG_DATA16, 0x8956, 0x0002},
{WRITE_REG_DATA16, 0x8958, 0xE683},
{WRITE_REG_DATA16, 0x895A, 0x22CA},
{WRITE_REG_DATA16, 0x895C, 0x038B},
{WRITE_REG_DATA16, 0x895E, 0xF69A},
{WRITE_REG_DATA16, 0x8960, 0xDA00},
{WRITE_REG_DATA16, 0x8962, 0xAD45},
{WRITE_REG_DATA16, 0x8964, 0x2540},
{WRITE_REG_DATA16, 0x8966, 0x1343},
{WRITE_REG_DATA16, 0x8968, 0xE180},
{WRITE_REG_DATA16, 0x896A, 0x2540},
{WRITE_REG_DATA16, 0x896C, 0x144F},
{WRITE_REG_DATA16, 0x896E, 0xF6D2},
{WRITE_REG_DATA16, 0x8970, 0x719F},
{WRITE_REG_DATA16, 0x8972, 0x78E0},
{WRITE_REG_DATA16, 0x8974, 0x20A8},
{WRITE_REG_DATA16, 0x8976, 0x0280},
{WRITE_REG_DATA16, 0x8978, 0x8B20},
{WRITE_REG_DATA16, 0x897A, 0x0813},
{WRITE_REG_DATA16, 0x897C, 0x0043},
{WRITE_REG_DATA16, 0x897E, 0xE201},
{WRITE_REG_DATA16, 0x8980, 0x7A4F},
{WRITE_REG_DATA16, 0x8982, 0xAD45},
{WRITE_REG_DATA16, 0x8984, 0xE301},
{WRITE_REG_DATA16, 0x8986, 0xE701},
{WRITE_REG_DATA16, 0x8988, 0xF004},
{WRITE_REG_DATA16, 0x898A, 0x8F20},
{WRITE_REG_DATA16, 0x898C, 0x09F3},
{WRITE_REG_DATA16, 0x898E, 0x8002},
{WRITE_REG_DATA16, 0x8990, 0xD088},
{WRITE_REG_DATA16, 0x8992, 0x8800},
{WRITE_REG_DATA16, 0x8994, 0xE803},
{WRITE_REG_DATA16, 0x8996, 0x0E0F},
{WRITE_REG_DATA16, 0x8998, 0x1080},
{WRITE_REG_DATA16, 0x899A, 0xD087},
{WRITE_REG_DATA16, 0x899C, 0x8000},
{WRITE_REG_DATA16, 0x899E, 0x8002},
{WRITE_REG_DATA16, 0x89A0, 0x7840},
{WRITE_REG_DATA16, 0x89A2, 0x0115},
{WRITE_REG_DATA16, 0x89A4, 0x06C4},
{WRITE_REG_DATA16, 0x89A6, 0x78E0},
{WRITE_REG_DATA16, 0x89A8, 0xC0F1},
{WRITE_REG_DATA16, 0x89AA, 0x08AA},
{WRITE_REG_DATA16, 0x89AC, 0x06C4},
{WRITE_REG_DATA16, 0x89AE, 0xD683},
{WRITE_REG_DATA16, 0x89B0, 0x8E01},
{WRITE_REG_DATA16, 0x89B2, 0xB8A4},
{WRITE_REG_DATA16, 0x89B4, 0xAE01},
{WRITE_REG_DATA16, 0x89B6, 0x8E09},
{WRITE_REG_DATA16, 0x89B8, 0xB8E0},
{WRITE_REG_DATA16, 0x89BA, 0xF29B},
{WRITE_REG_DATA16, 0x89BC, 0xD57B},
{WRITE_REG_DATA16, 0x89BE, 0x153A},
{WRITE_REG_DATA16, 0x89C0, 0x1080},
{WRITE_REG_DATA16, 0x89C2, 0x153B},
{WRITE_REG_DATA16, 0x89C4, 0x1081},
{WRITE_REG_DATA16, 0x89C6, 0xB808},
{WRITE_REG_DATA16, 0x89C8, 0x7825},
{WRITE_REG_DATA16, 0x89CA, 0x16B8},
{WRITE_REG_DATA16, 0x89CC, 0x1101},
{WRITE_REG_DATA16, 0x89CE, 0x092D},
{WRITE_REG_DATA16, 0x89D0, 0x0003},
{WRITE_REG_DATA16, 0x89D2, 0x16B0},
{WRITE_REG_DATA16, 0x89D4, 0x1082},
{WRITE_REG_DATA16, 0x89D6, 0x1E3C},
{WRITE_REG_DATA16, 0x89D8, 0x1082},
{WRITE_REG_DATA16, 0x89DA, 0x16B1},
{WRITE_REG_DATA16, 0x89DC, 0x1082},
{WRITE_REG_DATA16, 0x89DE, 0x1E3D},
{WRITE_REG_DATA16, 0x89E0, 0x1082},
{WRITE_REG_DATA16, 0x89E2, 0x16B4},
{WRITE_REG_DATA16, 0x89E4, 0x1082},
{WRITE_REG_DATA16, 0x89E6, 0x1E3E},
{WRITE_REG_DATA16, 0x89E8, 0x1082},
{WRITE_REG_DATA16, 0x89EA, 0x16B5},
{WRITE_REG_DATA16, 0x89EC, 0x1082},
{WRITE_REG_DATA16, 0x89EE, 0x1E3F},
{WRITE_REG_DATA16, 0x89F0, 0x1082},
{WRITE_REG_DATA16, 0x89F2, 0x8E40},
{WRITE_REG_DATA16, 0x89F4, 0xBAA6},
{WRITE_REG_DATA16, 0x89F6, 0xAE40},
{WRITE_REG_DATA16, 0x89F8, 0x098F},
{WRITE_REG_DATA16, 0x89FA, 0x0022},
{WRITE_REG_DATA16, 0x89FC, 0x16BA},
{WRITE_REG_DATA16, 0x89FE, 0x1102},
{WRITE_REG_DATA16, 0x8A00, 0x0A87},
{WRITE_REG_DATA16, 0x8A02, 0x0003},
{WRITE_REG_DATA16, 0x8A04, 0x16B2},
{WRITE_REG_DATA16, 0x8A06, 0x1084},
{WRITE_REG_DATA16, 0x8A08, 0x09DE},
{WRITE_REG_DATA16, 0x8A0A, 0x06A4},
{WRITE_REG_DATA16, 0x8A0C, 0x16B0},
{WRITE_REG_DATA16, 0x8A0E, 0x1083},
{WRITE_REG_DATA16, 0x8A10, 0x1E3C},
{WRITE_REG_DATA16, 0x8A12, 0x1002},
{WRITE_REG_DATA16, 0x8A14, 0x153A},
{WRITE_REG_DATA16, 0x8A16, 0x1080},
{WRITE_REG_DATA16, 0x8A18, 0x153B},
{WRITE_REG_DATA16, 0x8A1A, 0x1081},
{WRITE_REG_DATA16, 0x8A1C, 0x16B3},
{WRITE_REG_DATA16, 0x8A1E, 0x1084},
{WRITE_REG_DATA16, 0x8A20, 0xB808},
{WRITE_REG_DATA16, 0x8A22, 0x7825},
{WRITE_REG_DATA16, 0x8A24, 0x16B8},
{WRITE_REG_DATA16, 0x8A26, 0x1101},
{WRITE_REG_DATA16, 0x8A28, 0x16BA},
{WRITE_REG_DATA16, 0x8A2A, 0x1102},
{WRITE_REG_DATA16, 0x8A2C, 0x09BA},
{WRITE_REG_DATA16, 0x8A2E, 0x06A4},
{WRITE_REG_DATA16, 0x8A30, 0x16B1},
{WRITE_REG_DATA16, 0x8A32, 0x1083},
{WRITE_REG_DATA16, 0x8A34, 0x1E3D},
{WRITE_REG_DATA16, 0x8A36, 0x1002},
{WRITE_REG_DATA16, 0x8A38, 0x153A},
{WRITE_REG_DATA16, 0x8A3A, 0x1080},
{WRITE_REG_DATA16, 0x8A3C, 0x153B},
{WRITE_REG_DATA16, 0x8A3E, 0x1081},
{WRITE_REG_DATA16, 0x8A40, 0x16B6},
{WRITE_REG_DATA16, 0x8A42, 0x1084},
{WRITE_REG_DATA16, 0x8A44, 0xB808},
{WRITE_REG_DATA16, 0x8A46, 0x7825},
{WRITE_REG_DATA16, 0x8A48, 0x16B8},
{WRITE_REG_DATA16, 0x8A4A, 0x1101},
{WRITE_REG_DATA16, 0x8A4C, 0x16BA},
{WRITE_REG_DATA16, 0x8A4E, 0x1102},
{WRITE_REG_DATA16, 0x8A50, 0x0996},
{WRITE_REG_DATA16, 0x8A52, 0x06A4},
{WRITE_REG_DATA16, 0x8A54, 0x16B4},
{WRITE_REG_DATA16, 0x8A56, 0x1083},
{WRITE_REG_DATA16, 0x8A58, 0x1E3E},
{WRITE_REG_DATA16, 0x8A5A, 0x1002},
{WRITE_REG_DATA16, 0x8A5C, 0x153A},
{WRITE_REG_DATA16, 0x8A5E, 0x1080},
{WRITE_REG_DATA16, 0x8A60, 0x153B},
{WRITE_REG_DATA16, 0x8A62, 0x1081},
{WRITE_REG_DATA16, 0x8A64, 0x16B7},
{WRITE_REG_DATA16, 0x8A66, 0x1084},
{WRITE_REG_DATA16, 0x8A68, 0xB808},
{WRITE_REG_DATA16, 0x8A6A, 0x7825},
{WRITE_REG_DATA16, 0x8A6C, 0x16B8},
{WRITE_REG_DATA16, 0x8A6E, 0x1101},
{WRITE_REG_DATA16, 0x8A70, 0x16BA},
{WRITE_REG_DATA16, 0x8A72, 0x1102},
{WRITE_REG_DATA16, 0x8A74, 0x0972},
{WRITE_REG_DATA16, 0x8A76, 0x06A4},
{WRITE_REG_DATA16, 0x8A78, 0x16B5},
{WRITE_REG_DATA16, 0x8A7A, 0x1083},
{WRITE_REG_DATA16, 0x8A7C, 0x1E3F},
{WRITE_REG_DATA16, 0x8A7E, 0x1002},
{WRITE_REG_DATA16, 0x8A80, 0x8E00},
{WRITE_REG_DATA16, 0x8A82, 0xB8A6},
{WRITE_REG_DATA16, 0x8A84, 0xAE00},
{WRITE_REG_DATA16, 0x8A86, 0x153A},
{WRITE_REG_DATA16, 0x8A88, 0x1081},
{WRITE_REG_DATA16, 0x8A8A, 0x153B},
{WRITE_REG_DATA16, 0x8A8C, 0x1080},
{WRITE_REG_DATA16, 0x8A8E, 0xB908},
{WRITE_REG_DATA16, 0x8A90, 0x7905},
{WRITE_REG_DATA16, 0x8A92, 0x16BA},
{WRITE_REG_DATA16, 0x8A94, 0x1100},
{WRITE_REG_DATA16, 0x8A96, 0x085B},
{WRITE_REG_DATA16, 0x8A98, 0x0042},
{WRITE_REG_DATA16, 0x8A9A, 0xD049},
{WRITE_REG_DATA16, 0x8A9C, 0x9E31},
{WRITE_REG_DATA16, 0x8A9E, 0x904D},
{WRITE_REG_DATA16, 0x8AA0, 0x0A2B},
{WRITE_REG_DATA16, 0x8AA2, 0x0063},
{WRITE_REG_DATA16, 0x8AA4, 0x8E00},
{WRITE_REG_DATA16, 0x8AA6, 0x16B0},
{WRITE_REG_DATA16, 0x8AA8, 0x1081},
{WRITE_REG_DATA16, 0x8AAA, 0x1E3C},
{WRITE_REG_DATA16, 0x8AAC, 0x1042},
{WRITE_REG_DATA16, 0x8AAE, 0x16B1},
{WRITE_REG_DATA16, 0x8AB0, 0x1081},
{WRITE_REG_DATA16, 0x8AB2, 0x1E3D},
{WRITE_REG_DATA16, 0x8AB4, 0x1042},
{WRITE_REG_DATA16, 0x8AB6, 0x16B4},
{WRITE_REG_DATA16, 0x8AB8, 0x1081},
{WRITE_REG_DATA16, 0x8ABA, 0x1E3E},
{WRITE_REG_DATA16, 0x8ABC, 0x1042},
{WRITE_REG_DATA16, 0x8ABE, 0x16B5},
{WRITE_REG_DATA16, 0x8AC0, 0x1081},
{WRITE_REG_DATA16, 0x8AC2, 0x1E3F},
{WRITE_REG_DATA16, 0x8AC4, 0x1042},
{WRITE_REG_DATA16, 0x8AC6, 0xB886},
{WRITE_REG_DATA16, 0x8AC8, 0xF012},
{WRITE_REG_DATA16, 0x8ACA, 0x16B2},
{WRITE_REG_DATA16, 0x8ACC, 0x1081},
{WRITE_REG_DATA16, 0x8ACE, 0xB8A6},
{WRITE_REG_DATA16, 0x8AD0, 0x1E3C},
{WRITE_REG_DATA16, 0x8AD2, 0x1042},
{WRITE_REG_DATA16, 0x8AD4, 0x16B3},
{WRITE_REG_DATA16, 0x8AD6, 0x1081},
{WRITE_REG_DATA16, 0x8AD8, 0x1E3D},
{WRITE_REG_DATA16, 0x8ADA, 0x1042},
{WRITE_REG_DATA16, 0x8ADC, 0x16B6},
{WRITE_REG_DATA16, 0x8ADE, 0x1081},
{WRITE_REG_DATA16, 0x8AE0, 0x1E3E},
{WRITE_REG_DATA16, 0x8AE2, 0x1042},
{WRITE_REG_DATA16, 0x8AE4, 0x16B7},
{WRITE_REG_DATA16, 0x8AE6, 0x1081},
{WRITE_REG_DATA16, 0x8AE8, 0x1E3F},
{WRITE_REG_DATA16, 0x8AEA, 0x1042},
{WRITE_REG_DATA16, 0x8AEC, 0xAE00},
{WRITE_REG_DATA16, 0x8AEE, 0x0842},
{WRITE_REG_DATA16, 0x8AF0, 0x01C4},
{WRITE_REG_DATA16, 0x8AF2, 0x07CD},
{WRITE_REG_DATA16, 0x8AF4, 0x0684},
{WRITE_REG_DATA16, 0x8AF6, 0x78E0},
{WRITE_REG_DATA16, 0x8AF8, 0xC0F1},
{WRITE_REG_DATA16, 0x8AFA, 0x0F56},
{WRITE_REG_DATA16, 0x8AFC, 0x06A4},
{WRITE_REG_DATA16, 0x8AFE, 0xDA14},
{WRITE_REG_DATA16, 0x8B00, 0xD02B},
{WRITE_REG_DATA16, 0x8B02, 0xDE00},
{WRITE_REG_DATA16, 0x8B04, 0xD12F},
{WRITE_REG_DATA16, 0x8B06, 0x2E41},
{WRITE_REG_DATA16, 0x8B08, 0x120C},
{WRITE_REG_DATA16, 0x8B0A, 0xA895},
{WRITE_REG_DATA16, 0x8B0C, 0xD52E},
{WRITE_REG_DATA16, 0x8B0E, 0xA8D4},
{WRITE_REG_DATA16, 0x8B10, 0xA8D6},
{WRITE_REG_DATA16, 0x8B12, 0x0CE2},
{WRITE_REG_DATA16, 0x8B14, 0x06A4},
{WRITE_REG_DATA16, 0x8B16, 0x2555},
{WRITE_REG_DATA16, 0x8B18, 0x1440},
{WRITE_REG_DATA16, 0x8B1A, 0xD02C},
{WRITE_REG_DATA16, 0x8B1C, 0x2555},
{WRITE_REG_DATA16, 0x8B1E, 0x1441},
{WRITE_REG_DATA16, 0x8B20, 0x77A9},
{WRITE_REG_DATA16, 0x8B22, 0xA515},
{WRITE_REG_DATA16, 0x8B24, 0xD024},
{WRITE_REG_DATA16, 0x8B26, 0xA020},
{WRITE_REG_DATA16, 0x8B28, 0xD129},
{WRITE_REG_DATA16, 0x8B2A, 0x70E9},
{WRITE_REG_DATA16, 0x8B2C, 0x0CC6},
{WRITE_REG_DATA16, 0x8B2E, 0x06A4},
{WRITE_REG_DATA16, 0x8B30, 0xDA44},
{WRITE_REG_DATA16, 0x8B32, 0xD028},
{WRITE_REG_DATA16, 0x8B34, 0xD121},
{WRITE_REG_DATA16, 0x8B36, 0xA502},
{WRITE_REG_DATA16, 0x8B38, 0xD027},
{WRITE_REG_DATA16, 0x8B3A, 0xA0E0},
{WRITE_REG_DATA16, 0x8B3C, 0xD027},
{WRITE_REG_DATA16, 0x8B3E, 0xB0CB},
{WRITE_REG_DATA16, 0x8B40, 0x8900},
{WRITE_REG_DATA16, 0x8B42, 0xDB08},
{WRITE_REG_DATA16, 0x8B44, 0xDAF0},
{WRITE_REG_DATA16, 0x8B46, 0x19B0},
{WRITE_REG_DATA16, 0x8B48, 0x00C2},
{WRITE_REG_DATA16, 0x8B4A, 0xB8A6},
{WRITE_REG_DATA16, 0x8B4C, 0xA900},
{WRITE_REG_DATA16, 0x8B4E, 0xD851},
{WRITE_REG_DATA16, 0x8B50, 0x19B2},
{WRITE_REG_DATA16, 0x8B52, 0x0002},
{WRITE_REG_DATA16, 0x8B54, 0xD852},
{WRITE_REG_DATA16, 0x8B56, 0x19B3},
{WRITE_REG_DATA16, 0x8B58, 0x0002},
{WRITE_REG_DATA16, 0x8B5A, 0xD855},
{WRITE_REG_DATA16, 0x8B5C, 0x19B6},
{WRITE_REG_DATA16, 0x8B5E, 0x0002},
{WRITE_REG_DATA16, 0x8B60, 0xD856},
{WRITE_REG_DATA16, 0x8B62, 0x19B7},
{WRITE_REG_DATA16, 0x8B64, 0x0002},
{WRITE_REG_DATA16, 0x8B66, 0xD896},
{WRITE_REG_DATA16, 0x8B68, 0x19B8},
{WRITE_REG_DATA16, 0x8B6A, 0x0004},
{WRITE_REG_DATA16, 0x8B6C, 0xD814},
{WRITE_REG_DATA16, 0x8B6E, 0x19BA},
{WRITE_REG_DATA16, 0x8B70, 0x0004},
{WRITE_REG_DATA16, 0x8B72, 0xD805},
{WRITE_REG_DATA16, 0x8B74, 0xB111},
{WRITE_REG_DATA16, 0x8B76, 0x19B1},
{WRITE_REG_DATA16, 0x8B78, 0x0082},
{WRITE_REG_DATA16, 0x8B7A, 0x19B4},
{WRITE_REG_DATA16, 0x8B7C, 0x00C2},
{WRITE_REG_DATA16, 0x8B7E, 0x19B5},
{WRITE_REG_DATA16, 0x8B80, 0x0082},
{WRITE_REG_DATA16, 0x8B82, 0xD117},
{WRITE_REG_DATA16, 0x8B84, 0x2556},
{WRITE_REG_DATA16, 0x8B86, 0x12C0},
{WRITE_REG_DATA16, 0x8B88, 0x0C6A},
{WRITE_REG_DATA16, 0x8B8A, 0x06A4},
{WRITE_REG_DATA16, 0x8B8C, 0xDA2C},
{WRITE_REG_DATA16, 0x8B8E, 0xD015},
{WRITE_REG_DATA16, 0x8B90, 0x2556},
{WRITE_REG_DATA16, 0x8B92, 0x12C1},
{WRITE_REG_DATA16, 0x8B94, 0xA519},
{WRITE_REG_DATA16, 0x8B96, 0xD014},
{WRITE_REG_DATA16, 0x8B98, 0x071D},
{WRITE_REG_DATA16, 0x8B9A, 0x06A4},
{WRITE_REG_DATA16, 0x8B9C, 0xA020},
{WRITE_REG_DATA16, 0x8B9E, 0x78E0},
{WRITE_REG_DATA16, 0x8BA0, 0xFF00},
{WRITE_REG_DATA16, 0x8BA2, 0x33CC},
{WRITE_REG_DATA16, 0x8BA4, 0xFF80},
{WRITE_REG_DATA16, 0x8BA6, 0x0658},
{WRITE_REG_DATA16, 0x8BA8, 0xFF80},
{WRITE_REG_DATA16, 0x8BAA, 0x0250},
{WRITE_REG_DATA16, 0x8BAC, 0xFF80},
{WRITE_REG_DATA16, 0x8BAE, 0x0644},
{WRITE_REG_DATA16, 0x8BB0, 0x8000},
{WRITE_REG_DATA16, 0x8BB2, 0x0168},
{WRITE_REG_DATA16, 0x8BB4, 0x8000},
{WRITE_REG_DATA16, 0x8BB6, 0x0164},
{WRITE_REG_DATA16, 0x8BB8, 0xFF80},
{WRITE_REG_DATA16, 0x8BBA, 0x0314},
{WRITE_REG_DATA16, 0x8BBC, 0xFF80},
{WRITE_REG_DATA16, 0x8BBE, 0x050C},
{WRITE_REG_DATA16, 0x8BC0, 0x0000},
{WRITE_REG_DATA16, 0x8BC2, 0xF978},
{WRITE_REG_DATA16, 0x8BC4, 0xFF80},
{WRITE_REG_DATA16, 0x8BC6, 0x0D20},
{WRITE_REG_DATA16, 0x8BC8, 0xFF80},
{WRITE_REG_DATA16, 0x8BCA, 0x0918},
{WRITE_REG_DATA16, 0x8BCC, 0x0000},
{WRITE_REG_DATA16, 0x8BCE, 0xF9AC},
{WRITE_REG_DATA16, 0x8BD0, 0xFF80},
{WRITE_REG_DATA16, 0x8BD2, 0x08D0},
{WRITE_REG_DATA16, 0x8BD4, 0x8000},
{WRITE_REG_DATA16, 0x8BD6, 0x016C},
{WRITE_REG_DATA16, 0x8BD8, 0xFF80},
{WRITE_REG_DATA16, 0x8BDA, 0x0694},
{WRITE_REG_DATA16, 0x8BDC, 0x0000},
{WRITE_REG_DATA16, 0x8BDE, 0xF444},
{WRITE_REG_DATA16, 0x8BE0, 0xFF80},
{WRITE_REG_DATA16, 0x8BE2, 0x09A8},
{WRITE_REG_DATA16, 0x8BE4, 0x8000},
{WRITE_REG_DATA16, 0x8BE6, 0x009C},
{WRITE_REG_DATA16, 0x8BE8, 0xC0F1},
{WRITE_REG_DATA16, 0x8BEA, 0x0E5A},
{WRITE_REG_DATA16, 0x8BEC, 0x0684},
{WRITE_REG_DATA16, 0x8BEE, 0xD633},
{WRITE_REG_DATA16, 0x8BF0, 0x7708},
{WRITE_REG_DATA16, 0x8BF2, 0x8E01},
{WRITE_REG_DATA16, 0x8BF4, 0x1604},
{WRITE_REG_DATA16, 0x8BF6, 0x1091},
{WRITE_REG_DATA16, 0x8BF8, 0x2046},
{WRITE_REG_DATA16, 0x8BFA, 0x00C1},
{WRITE_REG_DATA16, 0x8BFC, 0x202F},
{WRITE_REG_DATA16, 0x8BFE, 0x2047},
{WRITE_REG_DATA16, 0x8C00, 0xAE21},
{WRITE_REG_DATA16, 0x8C02, 0x0F8F},
{WRITE_REG_DATA16, 0x8C04, 0x1440},
{WRITE_REG_DATA16, 0x8C06, 0x8EAA},
{WRITE_REG_DATA16, 0x8C08, 0x8E0B},
{WRITE_REG_DATA16, 0x8C0A, 0x224A},
{WRITE_REG_DATA16, 0x8C0C, 0x2040},
{WRITE_REG_DATA16, 0x8C0E, 0x8E2D},
{WRITE_REG_DATA16, 0x8C10, 0xBD08},
{WRITE_REG_DATA16, 0x8C12, 0x7D05},
{WRITE_REG_DATA16, 0x8C14, 0x8E0C},
{WRITE_REG_DATA16, 0x8C16, 0xB808},
{WRITE_REG_DATA16, 0x8C18, 0x7825},
{WRITE_REG_DATA16, 0x8C1A, 0x7510},
{WRITE_REG_DATA16, 0x8C1C, 0x22C2},
{WRITE_REG_DATA16, 0x8C1E, 0x248C},
{WRITE_REG_DATA16, 0x8C20, 0x081D},
{WRITE_REG_DATA16, 0x8C22, 0x0363},
{WRITE_REG_DATA16, 0x8C24, 0xD9FF},
{WRITE_REG_DATA16, 0x8C26, 0x2502},
{WRITE_REG_DATA16, 0x8C28, 0x1002},
{WRITE_REG_DATA16, 0x8C2A, 0x2A05},
{WRITE_REG_DATA16, 0x8C2C, 0x03FE},
{WRITE_REG_DATA16, 0x8C2E, 0x0EFA},
{WRITE_REG_DATA16, 0x8C30, 0x06A4},
{WRITE_REG_DATA16, 0x8C32, 0x702F},
{WRITE_REG_DATA16, 0x8C34, 0x7810},
{WRITE_REG_DATA16, 0x8C36, 0x7D02},
{WRITE_REG_DATA16, 0x8C38, 0x7DB0},
{WRITE_REG_DATA16, 0x8C3A, 0xF00B},
{WRITE_REG_DATA16, 0x8C3C, 0x78A2},
{WRITE_REG_DATA16, 0x8C3E, 0x2805},
{WRITE_REG_DATA16, 0x8C40, 0x03FE},
{WRITE_REG_DATA16, 0x8C42, 0x0EE6},
{WRITE_REG_DATA16, 0x8C44, 0x06A4},
{WRITE_REG_DATA16, 0x8C46, 0x702F},
{WRITE_REG_DATA16, 0x8C48, 0x7810},
{WRITE_REG_DATA16, 0x8C4A, 0x651D},
{WRITE_REG_DATA16, 0x8C4C, 0x7DB0},
{WRITE_REG_DATA16, 0x8C4E, 0x7DAF},
{WRITE_REG_DATA16, 0x8C50, 0x8E08},
{WRITE_REG_DATA16, 0x8C52, 0xBD06},
{WRITE_REG_DATA16, 0x8C54, 0xD11A},
{WRITE_REG_DATA16, 0x8C56, 0xB8C3},
{WRITE_REG_DATA16, 0x8C58, 0x78A5},
{WRITE_REG_DATA16, 0x8C5A, 0xB88F},
{WRITE_REG_DATA16, 0x8C5C, 0x1908},
{WRITE_REG_DATA16, 0x8C5E, 0x0024},
{WRITE_REG_DATA16, 0x8C60, 0x2841},
{WRITE_REG_DATA16, 0x8C62, 0x0201},
{WRITE_REG_DATA16, 0x8C64, 0x1E26},
{WRITE_REG_DATA16, 0x8C66, 0x1042},
{WRITE_REG_DATA16, 0x8C68, 0x0F15},
{WRITE_REG_DATA16, 0x8C6A, 0x1463},
{WRITE_REG_DATA16, 0x8C6C, 0x1E27},
{WRITE_REG_DATA16, 0x8C6E, 0x1002},
{WRITE_REG_DATA16, 0x8C70, 0x224C},
{WRITE_REG_DATA16, 0x8C72, 0xA000},
{WRITE_REG_DATA16, 0x8C74, 0x224A},
{WRITE_REG_DATA16, 0x8C76, 0x2040},
{WRITE_REG_DATA16, 0x8C78, 0x22C2},
{WRITE_REG_DATA16, 0x8C7A, 0x2482},
{WRITE_REG_DATA16, 0x8C7C, 0x204F},
{WRITE_REG_DATA16, 0x8C7E, 0x2040},
{WRITE_REG_DATA16, 0x8C80, 0x224C},
{WRITE_REG_DATA16, 0x8C82, 0xA000},
{WRITE_REG_DATA16, 0x8C84, 0xB8A2},
{WRITE_REG_DATA16, 0x8C86, 0xF204},
{WRITE_REG_DATA16, 0x8C88, 0x2045},
{WRITE_REG_DATA16, 0x8C8A, 0x2180},
{WRITE_REG_DATA16, 0x8C8C, 0xAE01},
{WRITE_REG_DATA16, 0x8C8E, 0x0A82},
{WRITE_REG_DATA16, 0x8C90, 0xFFE3},
{WRITE_REG_DATA16, 0x8C92, 0x70E9},
{WRITE_REG_DATA16, 0x8C94, 0x0609},
{WRITE_REG_DATA16, 0x8C96, 0x0684},
{WRITE_REG_DATA16, 0x8C98, 0xC0F1},
{WRITE_REG_DATA16, 0x8C9A, 0xD00A},
{WRITE_REG_DATA16, 0x8C9C, 0xD20A},
{WRITE_REG_DATA16, 0x8C9E, 0xD10B},
{WRITE_REG_DATA16, 0x8CA0, 0xA040},
{WRITE_REG_DATA16, 0x8CA2, 0x890C},
{WRITE_REG_DATA16, 0x8CA4, 0x080F},
{WRITE_REG_DATA16, 0x8CA6, 0x01DE},
{WRITE_REG_DATA16, 0x8CA8, 0xB8A7},
{WRITE_REG_DATA16, 0x8CAA, 0x8243},
{WRITE_REG_DATA16, 0x8CAC, 0xA90C},
{WRITE_REG_DATA16, 0x8CAE, 0x7A60},
{WRITE_REG_DATA16, 0x8CB0, 0x890C},
{WRITE_REG_DATA16, 0x8CB2, 0xC0D1},
{WRITE_REG_DATA16, 0x8CB4, 0x7EE0},
{WRITE_REG_DATA16, 0x8CB6, 0x78E0},
{WRITE_REG_DATA16, 0x8CB8, 0xFF80},
{WRITE_REG_DATA16, 0x8CBA, 0x0158},
{WRITE_REG_DATA16, 0x8CBC, 0xFF00},
{WRITE_REG_DATA16, 0x8CBE, 0x0618},
{WRITE_REG_DATA16, 0x8CC0, 0x8000},
{WRITE_REG_DATA16, 0x8CC2, 0x0008},
{WRITE_REG_DATA16, 0x8CC4, 0xFF80},
{WRITE_REG_DATA16, 0x8CC6, 0x0D10},
{WRITE_REG_DATA16, 0x8CC8, 0xFF80},
{WRITE_REG_DATA16, 0x8CCA, 0x0174},
{WRITE_REG_DATA16, 0x8CCC, 0xE280},
{WRITE_REG_DATA16, 0x8CCE, 0x24CA},
{WRITE_REG_DATA16, 0x8CD0, 0x7082},
{WRITE_REG_DATA16, 0x8CD2, 0x78E0},
{WRITE_REG_DATA16, 0x8CD4, 0x20E8},
{WRITE_REG_DATA16, 0x8CD6, 0x01A2},
{WRITE_REG_DATA16, 0x8CD8, 0x1002},
{WRITE_REG_DATA16, 0x8CDA, 0x0D02},
{WRITE_REG_DATA16, 0x8CDC, 0x1902},
{WRITE_REG_DATA16, 0x8CDE, 0x0094},
{WRITE_REG_DATA16, 0x8CE0, 0x7FE0},
{WRITE_REG_DATA16, 0x8CE2, 0x7028},
{WRITE_REG_DATA16, 0x8CE4, 0x7308},
{WRITE_REG_DATA16, 0x8CE6, 0x1000},
{WRITE_REG_DATA16, 0x8CE8, 0x0900},
{WRITE_REG_DATA16, 0x8CEA, 0x7904},
{WRITE_REG_DATA16, 0x8CEC, 0x7947},
{WRITE_REG_DATA16, 0x8CEE, 0x1B00},
{WRITE_REG_DATA16, 0x8CF0, 0x0064},
{WRITE_REG_DATA16, 0x8CF2, 0x7EE0},
{WRITE_REG_DATA16, 0x8CF4, 0xE280},
{WRITE_REG_DATA16, 0x8CF6, 0x24CA},
{WRITE_REG_DATA16, 0x8CF8, 0x7082},
{WRITE_REG_DATA16, 0x8CFA, 0x78E0},
{WRITE_REG_DATA16, 0x8CFC, 0x20E8},
{WRITE_REG_DATA16, 0x8CFE, 0x01A2},
{WRITE_REG_DATA16, 0x8D00, 0x1102},
{WRITE_REG_DATA16, 0x8D02, 0x0502},
{WRITE_REG_DATA16, 0x8D04, 0x1802},
{WRITE_REG_DATA16, 0x8D06, 0x00B4},
{WRITE_REG_DATA16, 0x8D08, 0x7FE0},
{WRITE_REG_DATA16, 0x8D0A, 0x7028},
{WRITE_REG_DATA16, 0x8D0C, 0x0000},
{WRITE_REG_DATA16, 0x8D0E, 0x0000},
{WRITE_REG_DATA16, 0x8D10, 0xFF80},
{WRITE_REG_DATA16, 0x8D12, 0x0C98},
{WRITE_REG_DATA16, 0x8D14, 0xFF80},
{WRITE_REG_DATA16, 0x8D16, 0x0BE8},
{WRITE_REG_DATA16, 0x8D18, 0x0000},
{WRITE_REG_DATA16, 0x8D1A, 0x08DC},
{WRITE_REG_DATA16, 0x8D1C, 0x0000},
{WRITE_REG_DATA16, 0x8D1E, 0x0998},
{WRITE_REG_DATA16, 0x098E, 0x0016},	// LOGICAL_ADDRESS_ACCESS [MODDRESS_LO]
{WRITE_REG_DATA16, 0x8016, 0x086C},	// MON_ADDRESS_LO
{WRITE_REG_DATA16, 0x8002, 0x0001},	// MON_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay
{WRITE_REG_DATA16, 0x098E, 0xC40C},
{WRITE_REG_DATA16, 0xC40C, 0x00FF},
{WRITE_REG_DATA16, 0xC40A, 0x0000},
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

//Patch for the CTS test-->
static struct sensor_reg mode_2592x1944_CTS[] = {
// reset the sensor
{WRITE_REG_DATA16, 0x001A, 0x0001},
{SENSOR_5M_WAIT_MS, 0x0000, 10   },
{WRITE_REG_DATA16, 0x001A, 0x0000},
{SENSOR_5M_WAIT_MS, 0x0000, 100  },
{WRITE_REG_DATA16, 0x0010, 0x0340},
{WRITE_REG_DATA16, 0x0012, 0x0070},
{WRITE_REG_DATA16, 0x0014, 0x2025},
{WRITE_REG_DATA16, 0x001E, 0x0777},	// PAD_SLEW_PAD_CONFIG
{WRITE_REG_DATA16, 0x0022, 0x0030},	// VDD_DIS_COUNTER
{WRITE_REG_DATA16, 0x002A, 0x7F6C},
{WRITE_REG_DATA16, 0x002C, 0x0000},
{WRITE_REG_DATA16, 0x002E, 0x0000},
{WRITE_REG_DATA16, 0x0018, 0x4008},	// STANDBY_CONTROL_AND_STATUS
{WRITE_REG_DATA16, 0x0010, 0x0340},	// PLL_DIVIDERS
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay=100

{WRITE_REG_DATA16, 0x098E, 0xC872},	// LOGICAL_ADDRESS_ACCESS [CAM_CORE_A_Y_ADDR_START]
{WRITE_REG_DATA16, 0xC86C, 0x0A28},	// CAM_CORE_A_OUTPUT_SIZE_WIDTH
{WRITE_REG_DATA16, 0xC86E, 0x07A0},	// CAM_CORE_A_OUTPUT_SIZE_HEIGHT
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay=150
{WRITE_REG_DATA16, 0xC83A, 0x0010},	// CAM_CORE_A_Y_ADDR_START
{WRITE_REG_DATA16, 0xC83C, 0x001C},	// CAM_CORE_A_X_ADDR_START
{WRITE_REG_DATA16, 0xC83E, 0x07AF},	// CAM_CORE_A_Y_ADDR_END
{WRITE_REG_DATA16, 0xC840, 0x0A43},	// CAM_CORE_A_X_ADDR_END
{WRITE_REG_DATA16, 0xC842, 0x0001},	// CAM_CORE_A_ROW_SPEED
{WRITE_REG_DATA16, 0xC844, 0x0101},	// CAM_CORE_A_SKIP_X_CORE
{WRITE_REG_DATA16, 0xC846, 0x0101},	// CAM_CORE_A_SKIP_Y_CORE
{WRITE_REG_DATA16, 0xC848, 0x0101},	// CAM_CORE_A_SKIP_X_PIPE
{WRITE_REG_DATA16, 0xC84A, 0x0101},	// CAM_CORE_A_SKIP_Y_PIPE
{WRITE_REG_DATA16, 0xC84C, 0x00F2},	// CAM_CORE_A_POWER_MODE
{WRITE_REG_DATA16, 0xC84E, 0x0000},	// CAM_CORE_A_BIN_MODE
{WRITE_REG_DATA16, 0xC850, 0x0000},	// CAM_CORE_A_ORIENTATION
{WRITE_REG_DATA16, 0xC852, 0x009C},	// CAM_CORE_A_FINE_CORRECTION
{WRITE_REG_DATA16, 0xC854, 0x034A},	// CAM_CORE_A_FINE_ITMIN

{WRITE_REG_DATA16, 0xC858, 0x0000},	// CAM_CORE_A_COARSE_ITMIN

{WRITE_REG_DATA16, 0xC85A, 0x0001},	// CAM_CORE_A_COARSE_ITMAX_MARGIN
{WRITE_REG_DATA16, 0xC85C, 0x07EF},	// CAM_CORE_A_MIN_FRAME_LENGTH_LINES
{WRITE_REG_DATA16, 0xC85E, 0xFFFF},	// CAM_CORE_A_MAX_FRAME_LENGTH_LINES
{WRITE_REG_DATA16, 0xC860, 0x07EF},	// CAM_CORE_A_BASE_FRAME_LENGTH_LINES
{WRITE_REG_DATA16, 0xC862, 0x1E48},	// CAM_CORE_A_MIN_LINE_LENGTH_PCLK
{WRITE_REG_DATA16, 0xC864, 0xFFFE},	// CAM_CORE_A_MAX_LINE_LENGTH_PCLK
{WRITE_REG_DATA16, 0xC866, 0x7F7C},	// CAM_CORE_A_P4_5_6_DIVIDER
{WRITE_REG_DATA16, 0xC868, 0x07EF},	// CAM_CORE_A_FRAME_LENGTH_LINES
{WRITE_REG_DATA16, 0xC86A, 0x1E48},	// CAM_CORE_A_LINE_LENGTH_PCK
{WRITE_REG_DATA16, 0xC870, 0x0014},	// CAM_CORE_A_RX_FIFO_TRIGGER_MARK
{WRITE_REG_DATA16, 0xC858, 0x0002},	// CAM_CORE_A_COARSE_ITMIN
{WRITE_REG_DATA16, 0xC8B8, 0x0004},	// CAM_OUTPUT_0_JPEG_CONTROL
{WRITE_REG_DATA16, 0xC8AE, 0x0001},	// CAM_OUTPUT_0_OUTPUT_FORMAT
{WRITE_REG_DATA16, 0xC8AA, 0x0A20},	// CAM_OUTPUT_0_IMAGE_WIDTH
{WRITE_REG_DATA16, 0xC8AC, 0x0798},	// CAM_OUTPUT_0_IMAGE_HEIGHT

{WRITE_REG_DATA16, 0xC88E, 0x02A6},	// Fine IT Max Margin (B) = 678

{WRITE_REG_DATA16, 0xC8C4, 0x0001},	// Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000},	// Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004},	// Output_1 JPEG control = 4

{WRITE_REG_DATA16, 0x8404, 0x0600},	// SEQ_CMD
{WRITE_REG_DATA16, 0x098E, 0xA00E},	// LOGICAL_ADDRESS_ACCESS [FD_MAX_NUM_AUTOCOR_FUNC_VALUES_TO_CHECK]
{WRITE_REG_DATA16, 0xA00E, 0x3235},	// FD_MAX_NUM_AUTOCOR_FUNC_VALUES_TO_CHECK
{WRITE_REG_DATA16, 0xA018, 0x0133},	// FD_EXPECTED50HZ_FLICKER_PERIOD_IN_CONTEXT_A
{WRITE_REG_DATA16, 0xA01A, 0x0113},	// FD_EXPECTED50HZ_FLICKER_PERIOD_IN_CONTEXT_B
{WRITE_REG_DATA16, 0xA01C, 0x00FF},	// FD_EXPECTED60HZ_FLICKER_PERIOD_IN_CONTEXT_A
{WRITE_REG_DATA16, 0xA01E, 0x00E4},	// FD_EXPECTED60HZ_FLICKER_PERIOD_IN_CONTEXT_B
{WRITE_REG_DATA16, 0xA010, 0x0129},	// FD_MIN_EXPECTED50HZ_FLICKER_PERIOD
{WRITE_REG_DATA16, 0xA012, 0x013D},	// FD_MAX_EXPECTED50HZ_FLICKER_PERIOD
{WRITE_REG_DATA16, 0xA014, 0x00F5},	// FD_MIN_EXPECTED60HZ_FLICKER_PERIOD
{WRITE_REG_DATA16, 0xA016, 0x0109},	// FD_MAX_EXPECTED60HZ_FLICKER_PERIOD
{WRITE_REG_DATA16, 0xA000, 0x1801},	// FD_STATUS
{WRITE_REG_DATA16, 0x8417, 0x0402},	// SEQ_STATE_CFG_1_FD
{WRITE_REG_DATA16, 0x8404, 0x0600},	// SEQ_CMD
{WRITE_REG_DATA16, 0x0018, 0x2008},	// STANDBY_CONTROL_AND_STATUS
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay=100

// MIPI mode
{WRITE_REG_DATA16, 0x301A, 0x107C},	// RESET_REGISTER
{WRITE_REG_DATA16, 0x3400, 0x7A26},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x3400, 0x7A26},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x0018},	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x001C},	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x3CA0, 0x0001},	// TXSS_PARAMETERS
{WRITE_REG_DATA16, 0xC8D4, 0x0000},	// CAM_OUTPUT_1_MIPICHANNEL
{WRITE_REG_DATA16, 0x3CA2, 0x0087},	// TXC_PARAMETERS
{WRITE_REG_DATA16, 0x3402, 0x0011},	// MIPI_STATUS
{WRITE_REG_DATA16, 0x3400, 0x7A20},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0xD822, 0x4710},	// JPEG_JPSS_CTRL_VAR
{WRITE_REG_DATA16, 0x8404, 0x0600},	// SEQ_CMD
{WRITE_REG_DATA8,  0x843E, 0x20  },	// SEQ_COMMON_CFG_CONT_TRACK_SPEED
{WRITE_REG_DATA8,  0x843F, 0x01  },	// SEQ_COMMON_CFG_CONT_JUMP_DIV
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay=150
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
}; // End of mode_2592x1944_CTS[]
//Patch for the CTS test-->

static struct sensor_reg is_preview[] = {
{POLL_REG_BIT,     0x8405, 0x0300},
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg is_capture[] = {
{POLL_REG_BIT,     0x8405, 0x0700},
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg mode_2592x1944[] = {
#if !(YUV_SENSOR_STROBE)
//[Capture-trigger]
{WRITE_REG_DATA16, 0x098E, 0x843C},	// MIPI_CONTROL
{WRITE_REG_DATA8,  0x843C, 0x04  },
{WRITE_REG_DATA8,  0x8404, 0x02  },
//{SW_FLASH_CHECK_POINT, 0x0000, 0x0000},
#else
//context as 2592x1944   ----->
{WRITE_REG_DATA16, 0x098E, 0xC872},	// LOGICAL_ADDRESS_ACCESS [CAM_CORE_B_Y_ADDR_START]
{WRITE_REG_DATA16, 0xC8A4, 0x0A28},	// Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0},	// Output Height (B) = 1952
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay=150
{WRITE_REG_DATA16, 0xC872, 0x0010},	// Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C},	// Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF},	// Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43},	// Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001},	// Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101},	// Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101},	// Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101},	// Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101},	// Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2},	// Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000},	// Bin Mode (B) = 0
{WRITE_REG_DATA16, 0xC888, 0x0000},	// Orientation (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C},	// Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A},	// Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6},	// Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002},	// Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001},	// Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF},	// Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF},	// Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF},	// Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1E48},	// Min Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC89C, 0xFFFE},	// Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C},	// P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF},	// Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1E48},	// Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC8A8, 0x0014},	// RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20},	// Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798},	// Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001},	// Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000},	// Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004},	// Output_1 JPEG control = 4
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay
//context as 2592x1944   <-----
#endif
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

/* Compal Indigo-Carl 110601 1280x720 ++ */
static struct sensor_reg mode_1280x720[] = {
// reset the sensor
{WRITE_REG_DATA16, 0x001A, 0x0001},
{SENSOR_5M_WAIT_MS, 0x0000,10},
{WRITE_REG_DATA16, 0x001A, 0x0000},
{SENSOR_5M_WAIT_MS, 0x0000,100},

// [PLL_24]
// for 24 MHz input, VCO=768 MHz
{WRITE_REG_DATA16, 0x0010, 0x0120} , 	// PLL_DIVIDERS
{WRITE_REG_DATA16, 0x0012, 0x0070} , 	// PLL_P_DIVIDERS
{WRITE_REG_DATA16, 0x0014, 0x2025} , 	// PLL_CONTROL
{WRITE_REG_DATA16, 0x0022, 0x0030} , 	// VDD_DIS_COUNTER -- 2us
{WRITE_REG_DATA16, 0x002A, 0x7FFF} , 	// PLL_P4_P5_P6_DIVIDERS
{WRITE_REG_DATA16, 0x002C, 0x0000} , 	// PLL_P7_DIVIDER
{WRITE_REG_DATA16, 0x002E, 0x0000} , 	// SENSOR_CLOCK_DIVIDER

{WRITE_REG_DATA16,  0x001E, 0x0777} , 	// PAD_SLEW_PAD_CONFIG
{WRITE_REG_DATA16,  0x0018, 0x400C} , 	// ESETDBY_CONTROL_AND_STATUS, release device from standby
// wait for power-up-stop status
{SENSOR_5M_WAIT_MS,0,30}, //DELAY= 30

{WRITE_REG_DATA16,  0x098E, 0x6004} , 	// LOGICAL_ADDRESS_ACCESS [IO_I2C_CLK_DIVIDER]
{WRITE_REG_DATA16,  0xE004, 0x0600} , 	// IO_I2C_CLK_DIVIDER, set I2C master clock to 400 KHz
{WRITE_REG_DATA16,  0xE002, 0x0108} , 	// IO_ALGO
{SENSOR_5M_WAIT_MS,0,30}, //DELAY= 30

// resync I2C master
{WRITE_REG_DATA16,  0x0016, 0x0057} , 	// CLOCKS_CONTROL
{WRITE_REG_DATA16,  0x3B00, 0x80A0} , 	// TXBUFFER_DATA_REGISTER_0
{WRITE_REG_DATA16,  0x3B02, 0x0000} , 	// TXBUFFER_DATA_REGISTER_1
{WRITE_REG_DATA16,  0x3B86, 0x0002} , 	// TXBUFFER_TOTAL_BYTE_COUNT
{WRITE_REG_DATA16,  0x3B82, 0x0007} , 	// I2C_MASTER_CONTROL
{SENSOR_5M_WAIT_MS,0,30}, //DELAY= 30
{WRITE_REG_DATA16,  0x0016, 0x0047} , 	// CLOCKS_CONTROL

// [timing]
{WRITE_REG_DATA16, 0x098E, 0x1000} ,
{WRITE_REG_DATA16, 0xC86C, 0x0518} ,	//Output Width (A) = 1304
{WRITE_REG_DATA16, 0xC86E, 0x02E4} ,	//Output Height (A) = 980
{WRITE_REG_DATA16, 0xC83A, 0x0084} ,	//Row Start (A) = 12
{WRITE_REG_DATA16, 0xC83C, 0x0018} ,	//Column Start (A) = 24
{WRITE_REG_DATA16, 0xC83E, 0x07B1} ,	//Row End (A) = 1969
{WRITE_REG_DATA16, 0xC840, 0x0A45} ,	//Column End (A) = 2629
{WRITE_REG_DATA16, 0xC842, 0x0001} ,	//Row Speed (A) = 1
{WRITE_REG_DATA16, 0xC844, 0x0103} ,	//Core Skip X (A) = 259
{WRITE_REG_DATA16, 0xC846, 0x0103} ,	//Core Skip Y (A) = 259
{WRITE_REG_DATA16, 0xC848, 0x0103} ,	//Pipe Skip X (A) = 259
{WRITE_REG_DATA16, 0xC84A, 0x0103} ,	//Pipe Skip Y (A) = 259
{WRITE_REG_DATA16, 0xC84C, 0x00F6} ,	//Power Mode (A) = 246
{WRITE_REG_DATA16, 0xC84E, 0x0001} ,	//Bin Mode (A) = 1
{WRITE_REG_DATA8,  0xC850, 0x00} ,	//Orientation (A) = 0
{WRITE_REG_DATA8,  0xC851, 0x00} ,	//Pixel Order (A) = 0
{WRITE_REG_DATA16, 0xC852, 0x019C} ,	//Fine Correction (A) = 412
/* Compal 2011.07.28 tune ++ */
/* fix vertical line on screen issue */
{WRITE_REG_DATA16, 0xC854, 0x09F0} ,
//{WRITE_REG_DATA16, 0xC854, 0x0732} ,	//Fine IT Min (A) = 1842
/* Compal 2011.07.28 tune -- */
{WRITE_REG_DATA16, 0xC856, 0x048E} ,	//Fine IT Max Margin (A) = 1166
{WRITE_REG_DATA16, 0xC858, 0x0002} ,	//Coarse IT Min (A) = 2
{WRITE_REG_DATA16, 0xC85A, 0x0001} ,	//Coarse IT Max Margin (A) = 1
{WRITE_REG_DATA16, 0xC85C, 0x0423} ,	//Min Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC85E, 0xFFFF} ,	//Max Frame Lines (A) = 65535
{WRITE_REG_DATA16, 0xC860, 0x0423} ,	//Base Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC862, 0x0E87} ,	//Min Line Length (A) = 3719
{WRITE_REG_DATA16, 0xC864, 0xFFFE} ,	//Max Line Length (A) = 65534
{WRITE_REG_DATA16, 0xC866, 0x7F7C} ,	//P456 Divider (A) = 32636
{WRITE_REG_DATA16, 0xC868, 0x0423} ,	//Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC86A, 0x0E87} ,	//Line Length (A) = 3719
{WRITE_REG_DATA16, 0xC870, 0x0014} ,	//RX FIFO Watermark (A) = 20
{WRITE_REG_DATA16, 0xC8AA, 0x0500} ,	//Output_0 Image Width = 1280
{WRITE_REG_DATA16, 0xC8AC, 0x02D0} ,	//Output_0 Image Height = 720
{WRITE_REG_DATA16, 0xC8AE, 0x0001} ,	//Output_0 Image Format = 1
{WRITE_REG_DATA16, 0xC8B0, 0x0000} ,	//Output_0 Format Order = 0
{WRITE_REG_DATA16, 0xC8B8, 0x0004} ,	//Output_0 JPEG control = 4
{WRITE_REG_DATA16, 0xC8A4, 0x0A28} ,	//Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0} ,	//Output Height (B) = 1952
{WRITE_REG_DATA16, 0xC872, 0x0010} ,	//Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C} ,	//Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF} ,	//Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43} ,	//Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001} ,	//Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101} ,	//Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101} ,	//Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101} ,	//Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101} ,	//Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2} ,	//Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000} ,	//Bin Mode (B) = 0
{WRITE_REG_DATA8,  0xC888, 0x00} ,	//Orientation (B) = 0
{WRITE_REG_DATA8,  0xC889, 0x00} ,	//Pixel Order (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C} ,	//Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A} ,	//Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6} ,	//Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002} ,	//Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001} ,	//Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF} ,	//Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF} ,	//Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF} ,	//Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1F0B} ,	//Min Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC89C, 0xFFFE} ,	//Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C} ,	//P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF} ,	//Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1F0B} ,	//Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC8A8, 0x0014} ,	//RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20} ,	//Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798} ,	//Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001} ,	//Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000} ,	//Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004} ,	//Output_1 JPEG control = 4

#if 0
//Context B for CTS test -->
{WRITE_REG_DATA16, 0x098E, 0xC872},	// LOGICAL_ADDRESS_ACCESS [CAM_CORE_B_Y_ADDR_START]
{WRITE_REG_DATA16, 0xC8A4, 0x0A28},	// Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0},	// Output Height (B) = 1952
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay=150
{WRITE_REG_DATA16, 0xC872, 0x0010},	// Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C},	// Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF},	// Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43},	// Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001},	// Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101},	// Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101},	// Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101},	// Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101},	// Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2},	// Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000},	// Bin Mode (B) = 0
{WRITE_REG_DATA16, 0xC888, 0x0000},	// Orientation (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C},	// Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A},	// Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6},	// Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002},	// Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001},	// Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF},	// Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF},	// Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF},	// Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1E48},	// Min Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC89C, 0xFFFE},	// Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C},	// P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF},	// Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1E48},	// Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC8A8, 0x0014},	// RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20},	// Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798},	// Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001},	// Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000},	// Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004},	// Output_1 JPEG control = 4
//ContextB for CTS <--
#endif

{WRITE_REG_DATA16, 0xA010, 0x0134} ,	//fd_min_expected50hz_flicker_period = 308
{WRITE_REG_DATA16, 0xA012, 0x0148} ,	//fd_max_expected50hz_flicker_period = 328
{WRITE_REG_DATA16, 0xA014, 0x00FF} ,	//fd_min_expected60hz_flicker_period = 255
{WRITE_REG_DATA16, 0xA016, 0x0113} ,	//fd_max_expected60hz_flicker_period = 275
{WRITE_REG_DATA16, 0xA018, 0x013E} ,	//fd_expected50hz_flicker_period (A) = 318
{WRITE_REG_DATA16, 0xA01A, 0x0095} ,	//fd_expected50hz_flicker_period (B) = 149
{WRITE_REG_DATA16, 0xA01C, 0x0109} ,	//fd_expected60hz_flicker_period (A) = 265
{WRITE_REG_DATA16, 0xA01E, 0x007C} ,	//fd_expected60hz_flicker_period (B) = 124
{WRITE_REG_DATA8,  0xDC0A, 0x06} ,	//Scaler Allow Zoom Ratio = 6
{WRITE_REG_DATA16, 0xDC1C, 0x2710} ,	//System Zoom Ratio = 10000
{WRITE_REG_DATA16, 0xE004, 0x1E00} ,	//I2C Master Clock Divider = 7680
{WRITE_REG_DATA8,  0x8404, 0x06} ,	//Refresh Sequencer Mode = 6

{SENSOR_5M_WAIT_MS,0,100}, //DELAY= 100

// AE_TRACK_MAX_INT_TIME is moved from pa_calib to here to ensure its validation
{WRITE_REG_DATA16, 0x098E, 0x281A},	// LOGICAL_ADDRESS_ACCESS[AE_TRACK_MAX_INT_TIME_ROWS]
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xA81C, 0x0040},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x0180},	// AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0200},
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// 30 fps
{WRITE_REG_DATA8,  0xA409, 0x40  },	// AE_RULE_BASE_TARGET  -- changed AE target  //0x40
*/
{WRITE_REG_DATA16, 0xA81C, 0x0080},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x00D0},	// AE_TRACK_TARGET_AGAIN  //0x0056 //0x0150
{WRITE_REG_DATA16, 0xA820, 0x0120},	// AE_TRACK_MAX_AGAIN  //0x0100 //0x0200
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN  //0x0140
//Sandow++ 2011.12.30 Solve low fps in camcorder issue
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// AE_TRACK_MAX_INT_TIME_ROWS  //30fps
//Snaodw--
{WRITE_REG_DATA8,  0xA409, 0x46  },	// AE_RULE_BASE_TARGET  -- changed AE target  //0x46
/* Compal Indigo-Carl 2011.09.01 tune -- */

// [MIPI enable]
{WRITE_REG_DATA16, 0x301A, 0x107C} ,  	// RESET_REGISTER
{WRITE_REG_DATA16, 0x3400, 0x7A26} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x3400, 0x7A26} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x0018} ,  	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x001C} ,  	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x3CA0, 0x0001} ,  	// TXSS_PARAMETERS
{WRITE_REG_DATA16, 0xC8D4, 0x0000} ,  	// CAM_OUTPUT_1_MIPICHANNEL
{WRITE_REG_DATA16, 0x3CA2, 0x0087} ,  	// TXC_PARAMETERS
{WRITE_REG_DATA16, 0x3402, 0x0011} ,  	// MIPI_STATUS
{WRITE_REG_DATA16, 0x3400, 0x7A24} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0xD822, 0x4710} ,  	// JPEG_JPSS_CTRL_VAR
{WRITE_REG_DATA16, 0x0018, 0x2008} ,  	// STANDBY_CONTROL_AND_STATUS, Run MCU
{SENSOR_5M_WAIT_MS,   0x0000,  00150},		//delay=100

/* Compal Indigo-Carl 2011.09.14 ++ */
{WRITE_REG_DATA8,  0x8404, 0x06  },     // Refresh Sequencer Mode = 6
{SENSOR_5M_WAIT_MS, 0x0000, 100  },     // delay=100
/* Compal Indigo-Carl 2011.09.14 -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};  // end of mode 1280x720
/* Compal Indigo-Carl 2011.06.01 1280x720 -- */

/* Compal Indigo-Carl 2011.06.01 640x480 ++ */
static struct sensor_reg mode_640x480[] = {
// reset the sensor
{WRITE_REG_DATA16, 0x001A, 0x0001},
{SENSOR_5M_WAIT_MS, 0x0000,   000010},
{WRITE_REG_DATA16 ,0x001A, 0x0000},
{SENSOR_5M_WAIT_MS, 0x0000,   000100},

{WRITE_REG_DATA16, 0x0010, 0x0120} , 	// PLL_DIVIDERS
{WRITE_REG_DATA16, 0x0012, 0x0070} , 	// PLL_P_DIVIDERS
{WRITE_REG_DATA16, 0x0014, 0x2025} , 	// PLL_CONTROL
{WRITE_REG_DATA16, 0x0022, 0x0030} , 	// VDD_DIS_COUNTER -- 2us
{WRITE_REG_DATA16, 0x002A, 0x7FFF} , 	// PLL_P4_P5_P6_DIVIDERS
{WRITE_REG_DATA16, 0x002C, 0x0000} , 	// PLL_P7_DIVIDER
{WRITE_REG_DATA16, 0x002E, 0x0000} , 	// SENSOR_CLOCK_DIVIDER

{WRITE_REG_DATA16,  0x001E, 0x0777} , 	// PAD_SLEW_PAD_CONFIG
{WRITE_REG_DATA16,  0x0018, 0x400C} , 	// ESETDBY_CONTROL_AND_STATUS, release device from standby
// wait for power-up-stop status
{SENSOR_5M_WAIT_MS,0,30}, //DELAY= 30

{WRITE_REG_DATA16, 0x098E, 0x6004},     // LOGICAL_ADDRESS_ACCESS [IO_I2C_CLK_DIVIDER]
{WRITE_REG_DATA16, 0xE004, 0x0600}, 	// IO_I2C_CLK_DIVIDER, set I2C master clock to 400 KHz
{WRITE_REG_DATA16, 0xE002, 0x0108}, 	// IO_ALGO
{SENSOR_5M_WAIT_MS,   000000, 000030},     //DELAY= 30

// resync I2C master
{WRITE_REG_DATA16, 0x0016, 0x0057} , 	// CLOCKS_CONTROL
{WRITE_REG_DATA16, 0x3B00, 0x80A0} , 	// TXBUFFER_DATA_REGISTER_0
{WRITE_REG_DATA16, 0x3B02, 0x0000} , 	// TXBUFFER_DATA_REGISTER_1
{WRITE_REG_DATA16, 0x3B86, 0x0002} , 	// TXBUFFER_TOTAL_BYTE_COUNT
{WRITE_REG_DATA16, 0x3B82, 0x0007} , 	// I2C_MASTER_CONTROL
{SENSOR_5M_WAIT_MS,   000000, 000030},     //DELAY= 30
{WRITE_REG_DATA16, 0x0016, 0x0047} , 	// CLOCKS_CONTROL

// [timing]
{WRITE_REG_DATA16, 0x098E, 0x1000} ,
{WRITE_REG_DATA16, 0xC86C, 0x0518} ,	//Output Width (A) = 1304
{WRITE_REG_DATA16, 0xC86E, 0x03D4} ,	//Output Height (A) = 980
{WRITE_REG_DATA16, 0xC83A, 0x000C} ,	//Row Start (A) = 12
{WRITE_REG_DATA16, 0xC83C, 0x0018} ,	//Column Start (A) = 24
{WRITE_REG_DATA16, 0xC83E, 0x07B1} ,	//Row End (A) = 1969
{WRITE_REG_DATA16, 0xC840, 0x0A45} ,	//Column End (A) = 2629
{WRITE_REG_DATA16, 0xC842, 0x0001} ,	//Row Speed (A) = 1
{WRITE_REG_DATA16, 0xC844, 0x0103} ,	//Core Skip X (A) = 259
{WRITE_REG_DATA16, 0xC846, 0x0103} ,	//Core Skip Y (A) = 259
{WRITE_REG_DATA16, 0xC848, 0x0103} ,	//Pipe Skip X (A) = 259
{WRITE_REG_DATA16, 0xC84A, 0x0103} ,	//Pipe Skip Y (A) = 259
{WRITE_REG_DATA16, 0xC84C, 0x00F6} ,	//Power Mode (A) = 246
{WRITE_REG_DATA16, 0xC84E, 0x0001} ,	//Bin Mode (A) = 1
{WRITE_REG_DATA8,  0xC850, 0x00} ,	//Orientation (A) = 0
{WRITE_REG_DATA8,  0xC851, 0x00} ,	//Pixel Order (A) = 0
{WRITE_REG_DATA16, 0xC852, 0x019C} ,	//Fine Correction (A) = 412
/* Compal 2011.07.28 tune ++ */
/* fix vertical line on screen issue */
{WRITE_REG_DATA16, 0xC854, 0x09F0} ,
//{WRITE_REG_DATA16, 0xC854, 0x0732} ,	//Fine IT Min (A) = 1842
/* Compal 2011.07.28 tune -- */
{WRITE_REG_DATA16, 0xC856, 0x048E} ,	//Fine IT Max Margin (A) = 1166
{WRITE_REG_DATA16, 0xC858, 0x0002} ,	//Coarse IT Min (A) = 2
{WRITE_REG_DATA16, 0xC85A, 0x0001} ,	//Coarse IT Max Margin (A) = 1
{WRITE_REG_DATA16, 0xC85C, 0x0423} ,	//Min Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC85E, 0xFFFF} ,	//Max Frame Lines (A) = 65535
{WRITE_REG_DATA16, 0xC860, 0x0423} ,	//Base Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC862, 0x0E87} ,	//Min Line Length (A) = 3719
{WRITE_REG_DATA16, 0xC864, 0xFFFE} ,	//Max Line Length (A) = 65534
{WRITE_REG_DATA16, 0xC866, 0x7F7C} ,	//P456 Divider (A) = 32636
{WRITE_REG_DATA16, 0xC868, 0x0423} ,	//Frame Lines (A) = 1059
{WRITE_REG_DATA16, 0xC86A, 0x0E87} ,	//Line Length (A) = 3719
{WRITE_REG_DATA16, 0xC870, 0x0014} ,	//RX FIFO Watermark (A) = 20
{WRITE_REG_DATA16, 0xC8AA, 0x0280} ,	//Output_0 Image Width = 640
{WRITE_REG_DATA16, 0xC8AC, 0x01E0} ,	//Output_0 Image Height = 480
{WRITE_REG_DATA16, 0xC8AE, 0x0001} ,	//Output_0 Image Format = 1
{WRITE_REG_DATA16, 0xC8B0, 0x0000} ,	//Output_0 Format Order = 0
{WRITE_REG_DATA16, 0xC8B8, 0x0004} ,	//Output_0 JPEG control = 4
{WRITE_REG_DATA16, 0xC8A4, 0x0A28} ,	//Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0} ,	//Output Height (B) = 1952
{WRITE_REG_DATA16, 0xC872, 0x0010} ,	//Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C} ,	//Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF} ,	//Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43} ,	//Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001} ,	//Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101} ,	//Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101} ,	//Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101} ,	//Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101} ,	//Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2} ,	//Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000} ,	//Bin Mode (B) = 0
{WRITE_REG_DATA8,  0xC888, 0x00} ,	//Orientation (B) = 0
{WRITE_REG_DATA8,  0xC889, 0x00} ,	//Pixel Order (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C} ,	//Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A} ,	//Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6} ,	//Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002} ,	//Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001} ,	//Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF} ,	//Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF} ,	//Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF} ,	//Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1F0B} ,	//Min Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC89C, 0xFFFE} ,	//Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C} ,	//P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF} ,	//Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1F0B} ,	//Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC8A8, 0x0014} ,	//RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20} ,	//Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798} ,	//Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001} ,	//Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000} ,	//Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004} ,	//Output_1 JPEG control = 4

#if 0
//context as 2592x1944   ----->
{WRITE_REG_DATA16, 0x098E, 0xC872},	// LOGICAL_ADDRESS_ACCESS [CAM_CORE_B_Y_ADDR_START]
{WRITE_REG_DATA16, 0xC8A4, 0x0A28},	// Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0},	// Output Height (B) = 1952
{SENSOR_5M_WAIT_MS, 0x0000, 150  },	// delay=150
{WRITE_REG_DATA16, 0xC872, 0x0010},	// Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C},	// Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF},	// Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43},	// Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001},	// Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101},	// Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101},	// Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101},	// Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101},	// Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2},	// Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000},	// Bin Mode (B) = 0
{WRITE_REG_DATA16, 0xC888, 0x0000},	// Orientation (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C},	// Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A},	// Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6},	// Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002},	// Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001},	// Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF},	// Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF},	// Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF},	// Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1E48},	// Min Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC89C, 0xFFFE},	// Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C},	// P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF},	// Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1E48},	// Line Length (B) = 7752
{WRITE_REG_DATA16, 0xC8A8, 0x0014},	// RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20},	// Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798},	// Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001},	// Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000},	// Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004},	// Output_1 JPEG control = 4
//context as 2592x1944   <-----
#endif

{WRITE_REG_DATA16, 0xA010, 0x0134} ,	//fd_min_expected50hz_flicker_period = 308
{WRITE_REG_DATA16, 0xA012, 0x0148} ,	//fd_max_expected50hz_flicker_period = 328
{WRITE_REG_DATA16, 0xA014, 0x00FF} ,	//fd_min_expected60hz_flicker_period = 255
{WRITE_REG_DATA16, 0xA016, 0x0113} ,	//fd_max_expected60hz_flicker_period = 275
{WRITE_REG_DATA16, 0xA018, 0x013E} ,	//fd_expected50hz_flicker_period (A) = 318
{WRITE_REG_DATA16, 0xA01A, 0x0095} ,	//fd_expected50hz_flicker_period (B) = 149
{WRITE_REG_DATA16, 0xA01C, 0x0109} ,	//fd_expected60hz_flicker_period (A) = 265
{WRITE_REG_DATA16, 0xA01E, 0x007C} ,	//fd_expected60hz_flicker_period (B) = 124
{WRITE_REG_DATA8,  0xDC0A, 0x06} ,	//Scaler Allow Zoom Ratio = 6
{WRITE_REG_DATA16, 0xDC1C, 0x2710} ,	//System Zoom Ratio = 10000
{WRITE_REG_DATA16, 0xE004, 0x1E00} ,	//I2C Master Clock Divider = 7680
{WRITE_REG_DATA8,  0x8404, 0x06} ,	//Refresh Sequencer Mode = 6
{SENSOR_5M_WAIT_MS,0,100}, //DELAY= 100

// AE_TRACK_MAX_INT_TIME is moved from pa_calib to here to ensure its validation
{WRITE_REG_DATA16, 0x098E, 0x281A},	// LOGICAL_ADDRESS_ACCESS[AE_TRACK_MAX_INT_TIME_ROWS]
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xA81C, 0x0040},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x0180},	// AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0200},
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},     // 30 fps
{WRITE_REG_DATA8,  0xA409, 0x40  },	// AE_RULE_BASE_TARGET  -- changed AE target  //0x40
*/
{WRITE_REG_DATA16, 0xA81C, 0x0080},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x00D0},	// AE_TRACK_TARGET_AGAIN  //0x0056 //0x0150
{WRITE_REG_DATA16, 0xA820, 0x0120},	// AE_TRACK_MAX_AGAIN  //0x0100 //0x0200
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN  //0x0140
//Sandow++ 2011.12.30 Solve low fps in camcorder issue
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// AE_TRACK_MAX_INT_TIME_ROWS  //30fps
//Snaodw--
{WRITE_REG_DATA8,  0xA409, 0x46  },	// AE_RULE_BASE_TARGET  -- changed AE target  // 0x46
/* Compal Indigo-Carl 2011.09.01 tune -- */

// [MIPI enable]
{WRITE_REG_DATA16, 0x301A, 0x107C} ,  	// RESET_REGISTER
{WRITE_REG_DATA16, 0x3400, 0x7A26} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x3400, 0x7A26} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x0018} ,  	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x001C} ,  	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x3CA0, 0x0001} ,  	// TXSS_PARAMETERS
{WRITE_REG_DATA16, 0xC8D4, 0x0000} ,  	// CAM_OUTPUT_1_MIPICHANNEL
{WRITE_REG_DATA16, 0x3CA2, 0x0087} ,  	// TXC_PARAMETERS
{WRITE_REG_DATA16, 0x3402, 0x0011} ,  	// MIPI_STATUS
{WRITE_REG_DATA16, 0x3400, 0x7A24} ,  	// MIPI_CONTROL
{WRITE_REG_DATA16, 0xD822, 0x4710} ,  	// JPEG_JPSS_CTRL_VAR
{WRITE_REG_DATA16, 0x0018, 0x2008} ,  	// STANDBY_CONTROL_AND_STATUS, Run MCU
{SENSOR_5M_WAIT_MS,   0x0000,  00150},		//delay=100

/* Compal Indigo-Carl 2011.09.14 ++ */
{WRITE_REG_DATA8,  0x8404, 0x06  },     // Refresh Sequencer Mode = 6
{SENSOR_5M_WAIT_MS, 0x0000, 100  },     // delay=100
/* Compal Indigo-Carl 2011.09.14 -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
}; // end of mode 640x480
/* Compal Indigo-Carl 2011.06.01 640x480 -- */

static struct sensor_reg mode_1280x960[] = {
// reset the sensor
{WRITE_REG_DATA16, 0x001A, 0x0001},
{SENSOR_5M_WAIT_MS, 0x0000, 10   },
{WRITE_REG_DATA16 ,0x001A, 0x0000},
{SENSOR_5M_WAIT_MS, 0x0000, 10   },

// for 24 MHz input, VCO=768 MHz
{WRITE_REG_DATA16, 0x0010, 0x0120},	// PLL_DIVIDERS
{WRITE_REG_DATA16, 0x0012, 0x0070},	// PLL_P_DIVIDERS
{WRITE_REG_DATA16, 0x0014, 0x2025},	// PLL_CONTROL
{WRITE_REG_DATA16, 0x0022, 0x0030},	// VDD_DIS_COUNTER -- 2us
{WRITE_REG_DATA16, 0x002A, 0x7FFF},	// PLL_P4_P5_P6_DIVIDERS
{WRITE_REG_DATA16, 0x002C, 0x0000},	// PLL_P7_DIVIDER
{WRITE_REG_DATA16, 0x002E, 0x0000},	// SENSOR_CLOCK_DIVIDER
{WRITE_REG_DATA16, 0x001E, 0x0777},	// PAD_SLEW_PAD_CONFIG
{WRITE_REG_DATA16, 0x0018, 0x400C},	// STANDBY_CONTROL_AND_STATUS

// wait for power-up-stop status
{SENSOR_5M_WAIT_MS, 0x0000, 30   },	// delay=30
{WRITE_REG_DATA16, 0x098E, 0x6004},	// LOGICAL_ADDRESS_ACCESS [IO_I2C_CLK_DIVIDER]
{WRITE_REG_DATA16, 0xE004, 0x0600},	// IO_I2C_CLK_DIVIDER, set I2C master clock to 400 KHz
{WRITE_REG_DATA16, 0xE002, 0x0108},	// IO_ALGO
{SENSOR_5M_WAIT_MS, 0x0000, 30   },	// delay=30

// resync I2C master
{WRITE_REG_DATA16, 0x0016, 0x0057},	// CLOCKS_CONTROL
{WRITE_REG_DATA16, 0x3B00, 0x80A0},	// TXBUFFER_DATA_REGISTER_0
{WRITE_REG_DATA16, 0x3B02, 0x0000},	// TXBUFFER_DATA_REGISTER_1
{WRITE_REG_DATA16, 0x3B86, 0x0002},	// TXBUFFER_TOTAL_BYTE_COUNT
{WRITE_REG_DATA16, 0x3B82, 0x0007},	// I2C_MASTER_CONTROL
{SENSOR_5M_WAIT_MS, 0x0000, 30   },	// delay=30

{WRITE_REG_DATA16, 0x0016, 0x0047},	// CLOCKS_CONTROL

// [timing]
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [CAM_CORE_A_Y_ADDR_START]
{WRITE_REG_DATA16, 0xC86C, 0x0518},	// CAM_CORE_A_OUTPUT_SIZE_WIDTH = 1304
{WRITE_REG_DATA16, 0xC86E, 0x03D4},	// CAM_CORE_A_OUTPUT_SIZE_HEIGHT = 980
{WRITE_REG_DATA16, 0xC83A, 0x000C},	// CAM_CORE_A_Y_ADDR_START = 12
{WRITE_REG_DATA16, 0xC83C, 0x0018},	// CAM_CORE_A_X_ADDR_START = 24
{WRITE_REG_DATA16, 0xC83E, 0x07B1},	// CAM_CORE_A_Y_ADDR_END = 1969
{WRITE_REG_DATA16, 0xC840, 0x0A45},	// CAM_CORE_A_X_ADDR_END = 2629
{WRITE_REG_DATA16, 0xC842, 0x0001},	// CAM_CORE_A_ROW_SPEED = 1
{WRITE_REG_DATA16, 0xC844, 0x0103},	// CAM_CORE_A_SKIP_X_CORE = 259
{WRITE_REG_DATA16, 0xC846, 0x0103},	// CAM_CORE_A_SKIP_Y_CORE = 259
{WRITE_REG_DATA16, 0xC848, 0x0103},	// CAM_CORE_A_SKIP_X_PIPE = 259
{WRITE_REG_DATA16, 0xC84A, 0x0103},	// CAM_CORE_A_SKIP_Y_PIPE = 259
{WRITE_REG_DATA16, 0xC84C, 0x00F6},	// CAM_CORE_A_POWER_MODE = 246
{WRITE_REG_DATA16, 0xC84E, 0x0001},	// CAM_CORE_A_BIN_MODE = 1
{WRITE_REG_DATA8,  0xC850, 0x00  },	// CAM_CORE_A_ORIENTATION = 0
{WRITE_REG_DATA8,  0xC851, 0x00  },	// CAM_CORE_A_PIXEL_ORDER = 0
{WRITE_REG_DATA16, 0xC852, 0x019C},	// CAM_CORE_A_FINE_CORRECTION = 412
/* Compal 2011.07.28 tune ++ */
/* fix vertical line on screen issue */
{WRITE_REG_DATA16, 0xC854, 0x09F0} ,
//{WRITE_REG_DATA16, 0xC854, 0x0732},	// CAM_CORE_A_FINE_ITMIN = 1842
/* Compal 2011.07.28 tune -- */
{WRITE_REG_DATA16, 0xC856, 0x048E},	// CAM_CORE_A_FINE_ITMAX_MARGIN = 1166
{WRITE_REG_DATA16, 0xC858, 0x0002},	// CAM_CORE_A_COARSE_ITMIN = 2
{WRITE_REG_DATA16, 0xC85A, 0x0001},	// CAM_CORE_A_COARSE_ITMAX_MARGIN = 1
{WRITE_REG_DATA16, 0xC85C, 0x0423},	// CAM_CORE_A_MIN_FRAME_LENGTH_LINES = 1059
{WRITE_REG_DATA16, 0xC85E, 0xFFFF},	// CAM_CORE_A_MAX_FRAME_LENGTH_LINES = 65535
{WRITE_REG_DATA16, 0xC860, 0x0423},	// CAM_CORE_A_BASE_FRAME_LENGTH_LINES = 1059
{WRITE_REG_DATA16, 0xC862, 0x0E87},	// CAM_CORE_A_MIN_LINE_LENGTH_PCLK 3719
{WRITE_REG_DATA16, 0xC864, 0xFFFE},	// CAM_CORE_A_MAX_LINE_LENGTH_PCLK = 65534
{WRITE_REG_DATA16, 0xC866, 0x7F7C},	// CAM_CORE_A_P4_5_6_DIVIDER = 32636
{WRITE_REG_DATA16, 0xC868, 0x0423},	// CAM_CORE_A_FRAME_LENGTH_LINES = 1059
{WRITE_REG_DATA16, 0xC86A, 0x0E87},	// CAM_CORE_A_LINE_LENGTH_PCK = 3719
{WRITE_REG_DATA16, 0xC870, 0x0014},	// CAM_CORE_A_RX_FIFO_TRIGGER_MARK = 20
{WRITE_REG_DATA16, 0xC8AA, 0x0500},	// CAM_OUTPUT_0_IMAGE_WIDTH = 1280
{WRITE_REG_DATA16, 0xC8AC, 0x03C0},	// CAM_OUTPUT_0_IMAGE_HEIGHT = 960
{WRITE_REG_DATA16, 0xC8AE, 0x0001},	// CAM_OUTPUT_0_OUTPUT_FORMAT = 1
{WRITE_REG_DATA16, 0xC8B0, 0x0000},	// CAM_OUTPUT_0_FORMAT_ORDER = 0
{WRITE_REG_DATA16, 0xC8B8, 0x0004},	// CAM_OUTPUT_0_JPEG_CONTROL = 4

//context as 2592x1944   ----->
{WRITE_REG_DATA16, 0xC8A4, 0x0A28},	// Output Width (B) = 2600
{WRITE_REG_DATA16, 0xC8A6, 0x07A0},	// Output Height (B) = 1952
{WRITE_REG_DATA16, 0xC872, 0x0010},	// Row Start (B) = 16
{WRITE_REG_DATA16, 0xC874, 0x001C},	// Column Start (B) = 28
{WRITE_REG_DATA16, 0xC876, 0x07AF},	// Row End (B) = 1967
{WRITE_REG_DATA16, 0xC878, 0x0A43},	// Column End (B) = 2627
{WRITE_REG_DATA16, 0xC87A, 0x0001},	// Row Speed (B) = 1
{WRITE_REG_DATA16, 0xC87C, 0x0101},	// Core Skip X (B) = 257
{WRITE_REG_DATA16, 0xC87E, 0x0101},	// Core Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC880, 0x0101},	// Pipe Skip X (B) = 257
{WRITE_REG_DATA16, 0xC882, 0x0101},	// Pipe Skip Y (B) = 257
{WRITE_REG_DATA16, 0xC884, 0x00F2},	// Power Mode (B) = 242
{WRITE_REG_DATA16, 0xC886, 0x0000},	// Bin Mode (B) = 0
{WRITE_REG_DATA8,  0xC888, 0x00  },	// Orientation (B) = 0
{WRITE_REG_DATA8,  0xC889, 0x00  },	// Pixel Order (B) = 0
{WRITE_REG_DATA16, 0xC88A, 0x009C},	// Fine Correction (B) = 156
{WRITE_REG_DATA16, 0xC88C, 0x034A},	// Fine IT Min (B) = 842
{WRITE_REG_DATA16, 0xC88E, 0x02A6},	// Fine IT Max Margin (B) = 678
{WRITE_REG_DATA16, 0xC890, 0x0002},	// Coarse IT Min (B) = 2
{WRITE_REG_DATA16, 0xC892, 0x0001},	// Coarse IT Max Margin (B) = 1
{WRITE_REG_DATA16, 0xC894, 0x07EF},	// Min Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC896, 0xFFFF},	// Max Frame Lines (B) = 65535
{WRITE_REG_DATA16, 0xC898, 0x07EF},	// Base Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC89A, 0x1F0B},	// Min Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC89C, 0xFFFE},	// Max Line Length (B) = 65534
{WRITE_REG_DATA16, 0xC89E, 0x7F7C},	// P456 Divider (B) = 32636
{WRITE_REG_DATA16, 0xC8A0, 0x07EF},	// Frame Lines (B) = 2031
{WRITE_REG_DATA16, 0xC8A2, 0x1F0B},	// Line Length (B) = 7947
{WRITE_REG_DATA16, 0xC8A8, 0x0014},	// RX FIFO Watermark (B) = 20
{WRITE_REG_DATA16, 0xC8C0, 0x0A20},	// Output_1 Image Width = 2592
{WRITE_REG_DATA16, 0xC8C2, 0x0798},	// Output_1 Image Height = 1944
{WRITE_REG_DATA16, 0xC8C4, 0x0001},	// Output_1 Image Format = 1
{WRITE_REG_DATA16, 0xC8C6, 0x0000},	// Output_1 Format Order = 0
{WRITE_REG_DATA16, 0xC8CE, 0x0004},	// Output_1 JPEG control = 4
//context as 2592x1944   <-----

{WRITE_REG_DATA16, 0xA010, 0x0134},	// FD_MIN_EXPECTED50HZ_FLICKER_PERIOD = 308
{WRITE_REG_DATA16, 0xA012, 0x0148},	// FD_MAX_EXPECTED50HZ_FLICKER_PERIOD = 328
{WRITE_REG_DATA16, 0xA014, 0x00FF},	// FD_MIN_EXPECTED60HZ_FLICKER_PERIOD = 255
{WRITE_REG_DATA16, 0xA016, 0x0113},	// FD_MAX_EXPECTED60HZ_FLICKER_PERIOD = 275
{WRITE_REG_DATA16, 0xA018, 0x013E},	// FD_EXPECTED50HZ_FLICKER_PERIOD_IN_CONTEXT_A = 318
{WRITE_REG_DATA16, 0xA01A, 0x0095},	// FD_EXPECTED50HZ_FLICKER_PERIOD_IN_CONTEXT_B = 149
{WRITE_REG_DATA16, 0xA01C, 0x0109},	// FD_EXPECTED60HZ_FLICKER_PERIOD_IN_CONTEXT_A = 265
{WRITE_REG_DATA16, 0xA01E, 0x007C},	// FD_EXPECTED60HZ_FLICKER_PERIOD_IN_CONTEXT_B = 124

{WRITE_REG_DATA8,  0xDC0A, 0x06  },	// Scaler Allow Zoom Ratio = 6
{WRITE_REG_DATA16, 0xDC1C, 0x2710},	// System Zoom Ratio = 10000
{WRITE_REG_DATA16, 0xE004, 0x1E00},	// I2C Master Clock Divider = 7680
{WRITE_REG_DATA8,  0x8404, 0x06  },	// Refresh Sequencer Mode = 6
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay=100

// AE_TRACK_MAX_INT_TIME is moved from pa_calib to here to ensure its validation
{WRITE_REG_DATA16, 0x098E, 0x281A},	// LOGICAL_ADDRESS_ACCESS[AE_TRACK_MAX_INT_TIME_ROWS]
/* Compal Indigo-Carl 2011.09.01 tune ++ */
/*
{WRITE_REG_DATA16, 0xA81C, 0x0040},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x0180},	// AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0200},
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},     // 30 fps
{WRITE_REG_DATA8,  0xA409, 0x40  },	// AE_RULE_BASE_TARGET  -- changed AE target  // 0x40
*/
{WRITE_REG_DATA16, 0xA81C, 0x0080},	// AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x00D0},	// AE_TRACK_TARGET_AGAIN  //0x0056 //0x0150
{WRITE_REG_DATA16, 0xA820, 0x0120},	// AE_TRACK_MAX_AGAIN  //0x0100 //0x0200
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN  //0x0140
//Sandow++ 2011.12.30 Solve low fps in camcorder issue
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// AE_TRACK_MAX_INT_TIME_ROWS  //30fps
//Snaodw--
{WRITE_REG_DATA8,  0xA409, 0x46  },	// AE_RULE_BASE_TARGET  -- changed AE target  // 0x46
/* Compal Indigo-Carl 2011.09.01 tune -- */

// MIPI mode
{WRITE_REG_DATA16, 0x301A, 0x107C},	// RESET_REGISTER
{WRITE_REG_DATA16, 0x3400, 0x7A26},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x3400, 0x7A26},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x0018},	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x001A, 0x001C},	// RESET_AND_MISC_CONTROL
{WRITE_REG_DATA16, 0x3CA0, 0x0001},	// TXSS_PARAMETERS
{WRITE_REG_DATA16, 0xC8D4, 0x0000},	// CAM_OUTPUT_1_MIPICHANNEL
{WRITE_REG_DATA16, 0x3CA2, 0x0087},	// TXC_PARAMETERS
{WRITE_REG_DATA16, 0x3402, 0x0011},	// MIPI_STATUS
{WRITE_REG_DATA16, 0x3400, 0x7A20},	// MIPI_CONTROL
{WRITE_REG_DATA16, 0xD822, 0x4710},	// JPEG_JPSS_CTRL_VAR
{WRITE_REG_DATA16, 0x8404, 0x0600},	// SEQ_CMD
{WRITE_REG_DATA8,  0x843E, 0x20  },	// SEQ_COMMON_CFG_CONT_TRACK_SPEED
{WRITE_REG_DATA8,  0x843F, 0x01  },	// SEQ_COMMON_CFG_CONT_JUMP_DIV
{WRITE_REG_DATA16, 0x0018, 0x2008},	// STANDBY_CONTROL_AND_STATUS
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// delay=150

/* Compal Indigo-Carl 2011.09.14 ++ */
{WRITE_REG_DATA8,  0x8404, 0x06  },     // Refresh Sequencer Mode = 6
{SENSOR_5M_WAIT_MS, 0x0000, 100  },     // delay=100
/* Compal Indigo-Carl 2011.09.14 -- */

{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};


/* ===== Color Effect ===== */

static struct sensor_reg ColorEffect_None[] = {
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x00  },	// SYS_SELECT_FX
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg ColorEffect_Mono[] = {
//[7.1 Mono Effect]
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x01  },	// SYS_SELECT_FX
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg ColorEffect_Sepia[] = {
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x02  },	// SYS_SELECT_FX
{WRITE_REG_DATA8,  0xDC3A, 0x20  },	// SYS_SEPIA_CR
{WRITE_REG_DATA8,  0xDC3B, 0xC0  },	// SYS_SEPIA_CB
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg ColorEffect_Negative[] = {
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x03  },	// SYS_SELECT_FX
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg ColorEffect_Solarize[] = {
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x04  },	// SYS_SELECT_FX
/* Compal Indigo-Carl begin */
/* to fix black dots bug */
//{WRITE_REG_DATA8,  0xDC39, 0x00  },	// SYS_SOLARIZATION_TH
{WRITE_REG_DATA8,  0xDC39, 0x40  },
/* Compal Indigo-Carl end */
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

//Sensor ISP Not Support this function
static struct sensor_reg ColorEffect_Posterize[] = {
{WRITE_REG_DATA16, 0x098E, 0x1000},	// LOGICAL_ADDRESS_ACCESS [SYS_SELECT_FX]
{WRITE_REG_DATA8,  0xDC38, 0x05  },	// SYS_SELECT_FX
{WRITE_REG_DATA16, 0xDC02, 0x007E},
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};


/* ===== White Balance ===== */

static struct sensor_reg Whitebalance_Auto[] = {
{WRITE_REG_DATA16, 0x098E, 0x8410},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_0_AWB]
{WRITE_REG_DATA8,  0x8410, 0x02  },	// SEQ_STATE_CFG_0_AWB
{WRITE_REG_DATA8,  0x8418, 0x02  },	// SEQ_STATE_CFG_1_AWB
{WRITE_REG_DATA8,  0x8420, 0x02  },	// SEQ_STATE_CFG_2_AWB
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg Whitebalance_Incandescent[] = {
{WRITE_REG_DATA16, 0x098E, 0x8410},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_0_AWB]
{WRITE_REG_DATA8,  0x8410, 0x01  },	// SEQ_STATE_CFG_0_AWB
{WRITE_REG_DATA8,  0x8418, 0x01  },	// SEQ_STATE_CFG_1_AWB
{WRITE_REG_DATA8,  0x8420, 0x01  },	// SEQ_STATE_CFG_2_AWB
{WRITE_REG_DATA8,  0xAC44, 0x7F  },	// AWB_LEFT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0xAC45, 0x7F  },	// AWB_RIGHT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// DELAY=50
{WRITE_REG_DATA8,  0xAC04, 0x55  },	// AWB_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC05, 0x30  },	// AWB_PRE_AWB_B2G_RATIO
{SENSOR_5M_WAIT_MS, 0x0000, 50   }, // DELAY=50
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg Whitebalance_Daylight[] = {
{WRITE_REG_DATA16, 0x098E, 0x8410},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_0_AWB]
{WRITE_REG_DATA8,  0x8410, 0x01  },	// SEQ_STATE_CFG_0_AWB
{WRITE_REG_DATA8,  0x8418, 0x01  },	// SEQ_STATE_CFG_1_AWB
{WRITE_REG_DATA8,  0x8420, 0x01  },	// SEQ_STATE_CFG_2_AWB
{WRITE_REG_DATA8,  0xAC44, 0x7F  },	// AWB_LEFT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0xAC45, 0x7F  },	// AWB_RIGHT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// DELAY=50
{WRITE_REG_DATA8,  0xAC04, 0x40  },	// AWB_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC05, 0x49  },	// AWB_PRE_AWB_B2G_RATIO
{SENSOR_5M_WAIT_MS, 0x0000, 50   }, // DELAY=50
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg Whitebalance_Fluorescent[] = {
{WRITE_REG_DATA16, 0x098E, 0x8410},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_0_AWB]
{WRITE_REG_DATA8,  0x8410, 0x01  },	// SEQ_STATE_CFG_0_AWB
{WRITE_REG_DATA8,  0x8418, 0x01  },	// SEQ_STATE_CFG_1_AWB
{WRITE_REG_DATA8,  0x8420, 0x01  },	// SEQ_STATE_CFG_2_AWB
{WRITE_REG_DATA8,  0xAC44, 0x40  },	// AWB_LEFT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0xAC45, 0x40  },	// AWB_RIGHT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// DELAY=50
{WRITE_REG_DATA8,  0xAC04, 0x45  },	// AWB_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC05, 0x35  },	// AWB_PRE_AWB_B2G_RATIO
{SENSOR_5M_WAIT_MS, 0x0000, 50   }, // DELAY=50
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg Whitebalance_CloudyDaylight[] = {
{WRITE_REG_DATA16, 0x098E, 0x8410},	// LOGICAL_ADDRESS_ACCESS [SEQ_STATE_CFG_0_AWB]
{WRITE_REG_DATA8,  0x8410, 0x01  },	// SEQ_STATE_CFG_0_AWB
{WRITE_REG_DATA8,  0x8418, 0x01  },	// SEQ_STATE_CFG_1_AWB
{WRITE_REG_DATA8,  0x8420, 0x01  },	// SEQ_STATE_CFG_2_AWB
{WRITE_REG_DATA8,  0xAC44, 0x7F  },	// AWB_LEFT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0xAC45, 0x7F  },	// AWB_RIGHT_CCM_POS_RANGE_LIMIT
{WRITE_REG_DATA8,  0x8404, 0x06  },	// SEQ_CMD
{SENSOR_5M_WAIT_MS, 0x0000, 100  },	// DELAY=50
{WRITE_REG_DATA8,  0xAC04, 0x44  },	// AWB_PRE_AWB_R2G_RATIO
{WRITE_REG_DATA8,  0xAC05, 0x49  },	// AWB_PRE_AWB_B2G_RATIO
{SENSOR_5M_WAIT_MS, 0x0000, 50   }, // DELAY=50
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};


/* ===== EV Level ===== */

static struct sensor_reg exp_negative2[] = {
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x2E  },	// AE_RULE_BASE_TARGET
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg exp_negative1[] = {
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x37  },	// AE_RULE_BASE_TARGET
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg exp_zero[] = {
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },	// AE_RULE_BASE_TARGET  //0x40, 0x46
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg exp_one[] = {
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x53  },	// AE_RULE_BASE_TARGET
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg exp_two[] = {
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x06  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x66  },	// AE_RULE_BASE_TARGET
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

/* Compal Indigo-Carl begin */

/* ===== Scene Mode ===== */

static struct sensor_reg scene_auto[] = {
//Auto sharpening
//{WRITE_REG_DATA16, 0xBC02, 0x017E},     // BITFIELD set bit1 to 1
{WRITE_REG_DATA16, 0xBC02, 0x0002},
//EV- 0
// controled by user setting
//ISO
// origin fine tune setting
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS[AE_TRACK_MAX_INT_TIME_ROWS]
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MAX_INT_TIME_ROWS
{WRITE_REG_DATA16, 0xA81E, 0x00D0},	// AE_TRACK_TARGET_AGAIN  //0x0056 //0x0150
{WRITE_REG_DATA16, 0xA820, 0x0120},	// AE_TRACK_MAX_AGAIN  //0x0100 //0x0200
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN  //0x0140
//Sandow++ 2011.12.30 Solve low fps in camcorder issue
{WRITE_REG_DATA16, 0xA81A, 0x0848},	// AE_TRACK_MAX_INT_TIME_ROWS  // 15 fps
//{WRITE_REG_DATA16, 0xA81A, 0x0424},	// AE_TRACK_MAX_INT_TIME_ROWS  //30fps
//Snaodw--
/* Compal Indigo-Carl 0901 tune -- */

//Auto color saturation
// origin fine tune setting
{WRITE_REG_DATA8, 0xBC56, 0x90},       // LL_START_CCM_SATURATION
{WRITE_REG_DATA8, 0xBC57, 0x55},       // LL_END_CCM_SATURATION
{WRITE_REG_DATA16, 0xBC02, 0x017E},     // BITFIELD set bit4 to 1

//Auto Contrast
/* Compal 0622 tune ++ */
{WRITE_REG_DATA16, 0x098E, 0xBC18},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CONTRAST_CURVE_0]
/* 2012.01.10 tune ++ */
/*
{WRITE_REG_DATA8, 0xBC2B, 0x00},	// LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x05},	// LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x0F},	// LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x2B},	// LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x50},	// LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x6B},	// LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x82},	// LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x96},	// LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xA6},	// LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xB4},	// LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xC0},	// LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xCB},	// LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xD4},	// LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xDD},	// LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE5},	// LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEC},	// LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF3},	// LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF9},	// LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},	// LL_GAMMA_NEUTRAL_CURVE_18
*/
{WRITE_REG_DATA8, 0xBC2B, 0x00},	// LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x06},	// LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x14},	// LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x31},	// LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x53},	// LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x6E},	// LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x84},	// LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x98},	// LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xA7},	// LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xB5},	// LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xC1},	// LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xCB},	// LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xD5},	// LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xDD},	// LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE5},	// LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEC},	// LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF3},	// LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF9},	// LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},	// LL_GAMMA_NEUTRAL_CURVE_18
/* 2012.01.10 tune -- */
//{WRITE_REG_DATA8, 0xBC51, 0x00},	// LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC51, 0x04},	// LL_GAMMA_CURVE_SELECTOR  //0x01(auto), 0x02(contrast), 0x04(neutral), 0x08(NR)

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_action[] = {
// AF - infinity
// AF off

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C

// sharpening +2
{WRITE_REG_DATA16, 0x3286, 0x0006},

// AWB

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 800
{WRITE_REG_DATA16, 0x098E, 0x281E},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA81C, 0x015E},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x015E},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0100},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0100},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0180},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0090},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation +1
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x83},       // AWB_CCM_SATURATION

// Contrast +1
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x08},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x17},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x2F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x4D},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x65},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x7B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x8E},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0x9F},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xBA},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xC5},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xCF},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xD9},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE2},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEA},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF1},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF8},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_portrait[] = {
// AF - entire scan
// AF on

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// AWB

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 200
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x00B0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x00B0},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_landscape[] = {
// AF on
// AF - Near Infinity Scan (hyperfocal)

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening +2
{WRITE_REG_DATA16, 0x3286, 0x0006},

// WB DayLight

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 50
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x0029},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x0029},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0029},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x0090},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation +1
//{WRITE_REG_DATA16, 0x098E, 0x3C02 },    // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x83},       // AWB_CCM_SATURATION

// Contrast +1
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x08},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x17},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x2F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x4D},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x65},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x7B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x8E},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0x9F},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xBA},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xC5},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xCF},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xD9},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xE2},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xEA},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF1},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF8},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_night[] = {
// Long exposure time, more black level, more denoise

// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening -2
{WRITE_REG_DATA16, 0x3286, 0x0002},

// AWB

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 200
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x00B0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x00B0},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_nightportrait[] = {
// turn on LED

// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening -1
{WRITE_REG_DATA16, 0x3286, 0x0003},

// AWB

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 800
{WRITE_REG_DATA16, 0x098E, 0x281E},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA81C, 0x015E},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x015E},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0100},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0100},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0180},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0090},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_theatre[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// WB DayLight

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 400
{WRITE_REG_DATA16, 0x098E, 0x281E},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA81C, 0x015E},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x015E},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x00E0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x013E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0160},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation +1
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x83},       // AWB_CCM_SATURATION

// Contrast +2
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x06},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x13},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x27},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x44},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x5B},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x70},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x84},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0x96},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xA5},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xB3},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xBF},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xCB},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xD5},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xDF},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF0},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF8},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_beach[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening +1
{WRITE_REG_DATA16, 0x3286, 0x0005},

// AWB

// EV- +1
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x53  },     // AE_RULE_BASE_TARGET  // 0x53

/* fix AE unstable ++ */
/*
// ISO 200
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x00B0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x00B0},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_snow[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// AWB

// EV- +2
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x06  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x66  },     // AE_RULE_BASE_TARGET  // 0x66

/* fix AE unstable ++ */
/*
// ISO 200
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x00B0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x00B0},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_sunset[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// WB DayLight

// EV- -1
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x37  },     // AE_RULE_BASE_TARGET  // 0x37

/* fix AE unstable ++ */
/*
// ISO 200
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x00B0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x00B0},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x00B0},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation +2
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0xA3},       // AWB_CCM_SATURATION

// Contrast +2
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x06},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x13},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x27},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x44},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x5B},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x70},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0x84},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0x96},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xA5},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xB3},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xBF},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xCB},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xD5},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xDF},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF0},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xF8},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_steadyphoto[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// AWB

// EV- 0
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x04  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x46  },     // AE_RULE_BASE_TARGET  // 0x40

/* fix AE unstable ++ */
/*
// ISO 400
{WRITE_REG_DATA16, 0x098E, 0x281E},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81E, 0x015E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA81C, 0x015E},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x015E},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x00E0},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x013E},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0160},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

static struct sensor_reg scene_fireworks[] = {
// AF on
// AF - entire scan

// disable auto sharpening
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // BITFIELD set bit1 to 0  //0x017C
// sharpening 0
{WRITE_REG_DATA16, 0x3286, 0x0004},

// AWB

// EV- +2
{WRITE_REG_DATA16, 0x098E, 0xA401},     // LOGICAL_ADDRESS_ACCESS [AE_RULE_MODE]
{WRITE_REG_DATA8,  0xA401, 0x00  },     // AE_RULE_MODE
{WRITE_REG_DATA8,  0xA805, 0x06  },     // AE_TRACK_GATE
{WRITE_REG_DATA8,  0xA409, 0x66  },     // AE_RULE_BASE_TARGET  // 0x66

/* fix AE unstable ++ */
/*
// ISO 50
{WRITE_REG_DATA16, 0x098E, 0x281C},     // LOGICAL_ADDRESS_ACCESS [AE_TRACK_MIN_AGAIN]
{WRITE_REG_DATA16, 0xA81C, 0x0029},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x0029},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0029},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0080},     // AE_TRACK_MAX_DGAIN
*/
{WRITE_REG_DATA16, 0x098E, 0x281A},     // LOGICAL_ADDRESS_ACCESS
{WRITE_REG_DATA16, 0xA81C, 0x0080},     // AE_TRACK_MIN_AGAIN
{WRITE_REG_DATA16, 0xA81E, 0x0090},     // AE_TRACK_TARGET_AGAIN
{WRITE_REG_DATA16, 0xA820, 0x0100},     // AE_TRACK_MAX_AGAIN
{WRITE_REG_DATA16, 0xA822, 0x0080},     // AE_TRACK_MIN_DGAIN
{WRITE_REG_DATA16, 0xA824, 0x0100},     // AE_TRACK_MAX_DGAIN
/* fix AE unstable -- */

// Color Saturation 0
//{WRITE_REG_DATA16, 0x098E, 0x3C02},     // LOGICAL_ADDRESS_ACCESS [LL_ALGO]
{WRITE_REG_DATA16, 0xBC02, 0x0000},     // saturation_disable_auto  //0x016E
{WRITE_REG_DATA8, 0xAC0E, 0x63},       // AWB_CCM_SATURATION

// Contrast 0
{WRITE_REG_DATA16, 0x098E, 0xBC51},     // LOGICAL_ADDRESS_ACCESS [LL_GAMMA_CURVE_SELECTOR]
{WRITE_REG_DATA8, 0xBC51, 0x04},        // LL_GAMMA_CURVE_SELECTOR
{WRITE_REG_DATA8, 0xBC2B, 0x00},       // LL_GAMMA_NEUTRAL_CURVE_0
{WRITE_REG_DATA8, 0xBC2C, 0x11},       // LL_GAMMA_NEUTRAL_CURVE_1
{WRITE_REG_DATA8, 0xBC2D, 0x23},       // LL_GAMMA_NEUTRAL_CURVE_2
{WRITE_REG_DATA8, 0xBC2E, 0x3F},       // LL_GAMMA_NEUTRAL_CURVE_3
{WRITE_REG_DATA8, 0xBC2F, 0x67},       // LL_GAMMA_NEUTRAL_CURVE_4
{WRITE_REG_DATA8, 0xBC30, 0x85},       // LL_GAMMA_NEUTRAL_CURVE_5
{WRITE_REG_DATA8, 0xBC31, 0x9B},       // LL_GAMMA_NEUTRAL_CURVE_6
{WRITE_REG_DATA8, 0xBC32, 0xAD},       // LL_GAMMA_NEUTRAL_CURVE_7
{WRITE_REG_DATA8, 0xBC33, 0xBB},       // LL_GAMMA_NEUTRAL_CURVE_8
{WRITE_REG_DATA8, 0xBC34, 0xC7},       // LL_GAMMA_NEUTRAL_CURVE_9
{WRITE_REG_DATA8, 0xBC35, 0xD1},       // LL_GAMMA_NEUTRAL_CURVE_10
{WRITE_REG_DATA8, 0xBC36, 0xDA},       // LL_GAMMA_NEUTRAL_CURVE_11
{WRITE_REG_DATA8, 0xBC37, 0xE1},       // LL_GAMMA_NEUTRAL_CURVE_12
{WRITE_REG_DATA8, 0xBC38, 0xE8},       // LL_GAMMA_NEUTRAL_CURVE_13
{WRITE_REG_DATA8, 0xBC39, 0xEE},       // LL_GAMMA_NEUTRAL_CURVE_14
{WRITE_REG_DATA8, 0xBC3A, 0xF3},       // LL_GAMMA_NEUTRAL_CURVE_15
{WRITE_REG_DATA8, 0xBC3B, 0xF7},       // LL_GAMMA_NEUTRAL_CURVE_16
{WRITE_REG_DATA8, 0xBC3C, 0xFB},       // LL_GAMMA_NEUTRAL_CURVE_17
{WRITE_REG_DATA8, 0xBC3D, 0xFF},       // LL_GAMMA_NEUTRAL_CURVE_18

{WRITE_REG_DATA8, 0x8404, 0x06},       // SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};

/* Compal Indigo-Carl end */

/* Compal Indigo-Carl 2012.01 ++ */
/* Focus window setting for touch focus */
static struct sensor_reg default_focus_window[] = {  // Carl test
{WRITE_REG_DATA16, 0x098E, 0xB854},	// LOGICAL_ADDRESS_ACCESS [STAT_SM_WINDOW_POS_X]
{WRITE_REG_DATA8, 0xB854, 0x20},	// X START POSITION
{WRITE_REG_DATA8, 0xB855, 0x20},        // Y START POSITION
{WRITE_REG_DATA8, 0xB856, 0xBF},        // X WINDOW SIZE
{WRITE_REG_DATA8, 0xB857, 0xBF},        // Y WINDOW SIZE
{WRITE_REG_DATA8, 0x8404, 0x06},	// SEQ_CMD
{SENSOR_5M_TABLE_END, 0x0000, 0x0000}
};
/* Compal Indigo-Carl 2012.01 -- */

enum {
	SENSOR_MODE_2592x1944 = 0,
	SENSOR_MODE_1280x960,
	SENSOR_MODE_1280x720,
	SENSOR_MODE_640x480,
};

static struct sensor_reg *mode_table[] = {
	[SENSOR_MODE_2592x1944] = mode_2592x1944,
	[SENSOR_MODE_1280x960]  = mode_1280x960,
	[SENSOR_MODE_1280x720]  = mode_1280x720,
	[SENSOR_MODE_640x480]   = mode_640x480,
};

enum {
	SENSOR_AF_INFINITY = 0 ,
	SENSOR_AF_FULLTRIGER,
};
static struct sensor_reg *af_mode_table[] = {
	[SENSOR_AF_INFINITY]    = af_infinity,
	[SENSOR_AF_FULLTRIGER]  = af_full_trigger,
};

enum {
	YUV_5M_Exposure_Negative_2 = 0,
	YUV_5M_Exposure_Negative_1,
	YUV_5M_Exposure_0,
	YUV_5M_Exposure_1,
	YUV_5M_Exposure_2
};

#if defined(__cplusplus)
}
#endif

#endif // YUV5_SENSOR_TAB_H
